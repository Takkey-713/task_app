[{"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts":"1","/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx":"2","/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx":"3","/Users/tksk/api-practice/task_app/src/components/pages/main/board/Board.tsx":"4","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx":"5","/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx":"6","/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx":"7","/Users/tksk/api-practice/task_app/src/App.tsx":"8","/Users/tksk/api-practice/task_app/src/components/common.ts":"9","/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts":"10","/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts":"11","/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts":"12"},{"size":425,"mtime":1614906242000,"results":"13","hashOfConfig":"14"},{"size":5522,"mtime":1615265681000,"results":"15","hashOfConfig":"14"},{"size":800,"mtime":1614906242000,"results":"16","hashOfConfig":"14"},{"size":5036,"mtime":1615265681000,"results":"17","hashOfConfig":"14"},{"size":1026,"mtime":1614906242000,"results":"18","hashOfConfig":"14"},{"size":5083,"mtime":1615271560000,"results":"19","hashOfConfig":"14"},{"size":957,"mtime":1615357051436,"results":"20","hashOfConfig":"14"},{"size":2936,"mtime":1615265681000,"results":"21","hashOfConfig":"14"},{"size":124,"mtime":1615357261276,"results":"22","hashOfConfig":"14"},{"size":1208,"mtime":1615357511254,"results":"23","hashOfConfig":"14"},{"size":1342,"mtime":1615358200142,"results":"24","hashOfConfig":"14"},{"size":1370,"mtime":1615357610835,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h2c9qo",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts",[],"/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx",["53"],"/Users/tksk/api-practice/task_app/src/components/pages/main/board/Board.tsx",["54"],"/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx",[],["55","56"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx",["57","58","59"],"/Users/tksk/api-practice/task_app/src/App.tsx",["60"],"import React, { useState, useEffect } from \"react\";\nimport { Home } from \"./components/Home\";\nimport { AuthForm } from \"./components/auth/AuthForm\";\nimport { AuthRequest } from \"./components/requests/AuthRequest\";\nimport { BoardRequest } from \"./components/requests/BoardRequest\";\nimport { TaskRequest } from \"./components/requests/TaskRequest\";\nimport { UserType } from \"./components/interfaces/interface\";\nimport {\n  Data,\n  dataAction,\n  useDataReducer,\n} from \"./components/hooks/useDataReducer\";\n\ntype dataContextType = {\n  data: Data;\n  dispatch: ({ type, payload }: dataAction) => void;\n};\n\nexport const DataContext = React.createContext<dataContextType>(\n  {} as dataContextType\n);\n\nexport const App: React.FC = () => {\n  // ここにtask,board,userのstateを管理する\b\n  const [data, dispatch] = useDataReducer();\n  // eslint-disable-next-line\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState<UserType>({\n    id: 0,\n    email: \"\",\n  });\n  // eslint-disable-next-line\n  // userのstateは本アプリで必要になる\n  const handleOnChangeStatus = (user: UserType): void => {\n    setIsLoggedIn(!isLoggedIn);\n    setUser(user);\n  };\n\n  const handleOnLogout = async () => {\n    try {\n      const res = await AuthRequest(\"sign_out\");\n      if (!res.logged_in) {\n        setIsLoggedIn(!isLoggedIn);\n        setUser({ id: 0, email: \"\" });\n      }\n    } catch {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const checkLoginStatus = async () => {\n    try {\n      const res = await AuthRequest(\"check_login\");\n      if (res.logged_in && isLoggedIn === false) {\n        setIsLoggedIn(true);\n        setUser(res.user);\n      } else if (res.status === 401) {\n        setIsLoggedIn(false);\n      }\n    } catch {\n      alert(\"通信に失敗しました\");\n    }\n  };\n\n  // 初回マウンティングした時にデータベースのボードとタスクを全て持ってくる\n  const fetchData = async () => {\n    const boards = await BoardRequest(\"fetchBoards\");\n    const tasks = await TaskRequest(\"fetchTasks\");\n    dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n    dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n  };\n\n  useEffect(() => {\n    checkLoginStatus();\n  }, []);\n\n  useEffect(() => {\n    checkLoginStatus();\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  useEffect(() => {\n    dispatch({\n      type: \"tasksUpdate\",\n      payload: { task: data.tasks },\n    });\n    // eslint-disable-next-line\n  }, [data.tasks]);\n\n  return (\n    <DataContext.Provider value={{ data, dispatch }}>\n      <>\n        {isLoggedIn ? (\n          <Home isLoggedIn={isLoggedIn} handleOnLogout={handleOnLogout} />\n        ) : (\n          <AuthForm\n            isLoggedIn={isLoggedIn}\n            handleOnChangeStatus={handleOnChangeStatus}\n          />\n        )}\n      </>\n    </DataContext.Provider>\n  );\n};\n",["61","62"],"/Users/tksk/api-practice/task_app/src/components/common.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts",[],{"ruleId":"63","severity":1,"message":"64","line":3,"column":8,"nodeType":"65","messageId":"66","endLine":3,"endColumn":23},{"ruleId":"63","severity":1,"message":"67","line":22,"column":11,"nodeType":"65","messageId":"66","endLine":22,"endColumn":15},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"63","severity":1,"message":"72","line":8,"column":11,"nodeType":"65","messageId":"66","endLine":8,"endColumn":21},{"ruleId":"63","severity":1,"message":"73","line":12,"column":11,"nodeType":"65","messageId":"66","endLine":12,"endColumn":20},{"ruleId":"63","severity":1,"message":"74","line":17,"column":17,"nodeType":"65","messageId":"66","endLine":17,"endColumn":25},{"ruleId":"75","severity":1,"message":"76","line":75,"column":6,"nodeType":"77","endLine":75,"endColumn":8,"suggestions":"78"},{"ruleId":"68","replacedBy":"79"},{"ruleId":"70","replacedBy":"80"},"@typescript-eslint/no-unused-vars","'DoneOutlineIcon' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"'BoardsType' is defined but never used.","'TasksType' is defined but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkLoginStatus'. Either include it or remove the dependency array.","ArrayExpression",["83"],["81"],["82"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [checkLoginStatus]",{"range":"86","text":"87"},[2115,2117],"[checkLoginStatus]"]