[{"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts":"1","/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx":"2","/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx":"3","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx":"4","/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx":"5","/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx":"6","/Users/tksk/api-practice/task_app/src/App.tsx":"7","/Users/tksk/api-practice/task_app/src/components/common.ts":"8","/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts":"9","/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts":"10","/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts":"11","/Users/tksk/api-practice/task_app/src/index.tsx":"12","/Users/tksk/api-practice/task_app/src/components/hooks/useDataReducer.ts":"13","/Users/tksk/api-practice/task_app/src/components/auth/AuthHeader.tsx":"14","/Users/tksk/api-practice/task_app/src/components/pages/search/SearchForm.tsx":"15","/Users/tksk/api-practice/task_app/src/components/pages/main/list/List.tsx":"16","/Users/tksk/api-practice/task_app/src/components/pages/modal/ListModal.tsx":"17","/Users/tksk/api-practice/task_app/src/components/pages/main/addList/AddList.tsx":"18","/Users/tksk/api-practice/task_app/src/components/requests/ListRequest.ts":"19","/Users/tksk/api-practice/task_app/src/components/pages/home/Home.tsx":"20","/Users/tksk/api-practice/task_app/src/components/pages/modal/FormModal.tsx":"21","/Users/tksk/api-practice/task_app/src/components/pages/board/Board.tsx":"22","/Users/tksk/api-practice/task_app/src/components/hooks/useMediaQuery.ts":"23","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardModal.tsx":"24","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardBody.tsx":"25"},{"size":425,"mtime":1614906242000,"results":"26","hashOfConfig":"27"},{"size":5522,"mtime":1615604811985,"results":"28","hashOfConfig":"27"},{"size":800,"mtime":1614906242000,"results":"29","hashOfConfig":"27"},{"size":1083,"mtime":1615696884852,"results":"30","hashOfConfig":"27"},{"size":5113,"mtime":1615697032823,"results":"31","hashOfConfig":"27"},{"size":1354,"mtime":1615699903533,"results":"32","hashOfConfig":"27"},{"size":3677,"mtime":1615636781727,"results":"33","hashOfConfig":"27"},{"size":124,"mtime":1615357261276,"results":"34","hashOfConfig":"27"},{"size":1314,"mtime":1615428994411,"results":"35","hashOfConfig":"27"},{"size":1342,"mtime":1615358200142,"results":"36","hashOfConfig":"27"},{"size":1370,"mtime":1615357610835,"results":"37","hashOfConfig":"27"},{"size":292,"mtime":1614906242000,"results":"38","hashOfConfig":"27"},{"size":1219,"mtime":1615695784857,"results":"39","hashOfConfig":"27"},{"size":216,"mtime":1615265681000,"results":"40","hashOfConfig":"27"},{"size":1313,"mtime":1615265681000,"results":"41","hashOfConfig":"27"},{"size":5261,"mtime":1615696776605,"results":"42","hashOfConfig":"27"},{"size":7528,"mtime":1615696969208,"results":"43","hashOfConfig":"27"},{"size":2012,"mtime":1615696571546,"results":"44","hashOfConfig":"27"},{"size":1323,"mtime":1615554915677,"results":"45","hashOfConfig":"27"},{"size":877,"mtime":1615650911027,"results":"46","hashOfConfig":"27"},{"size":2122,"mtime":1615696849139,"results":"47","hashOfConfig":"27"},{"size":6847,"mtime":1615698670783,"results":"48","hashOfConfig":"27"},{"size":750,"mtime":1615265681000,"results":"49","hashOfConfig":"27"},{"size":1239,"mtime":1615698864244,"results":"50","hashOfConfig":"27"},{"size":1785,"mtime":1615695724001,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h2c9qo",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts",[],"/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx",[],["106","107"],"/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx",["108"],"import React from \"react\";\nimport styles from \"./Header.module.css\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport { SearchForm } from \"../search/SearchForm\";\n\ninterface Props {\n  handleOnLogout: () => void;\n  isLoggedIn: boolean;\n}\nexport const Header: React.FC<Props> = (props) => {\n  return (\n    <div className={styles.header}>\n      <div className={styles.header_search_area}>\n        <SearchForm />\n      </div>\n\n      <div className={styles.header_title_list}>\n        <div className={styles.header_title}>Task App</div>\n      </div>\n\n      <div className={styles.header_list}>\n        <ul className={styles.ul}>\n          <li className={styles.li} onClick={() => props.handleOnLogout()}>\n            Logout\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx",["109"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx",["110","111"],"/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx",["112","113","114"],"/Users/tksk/api-practice/task_app/src/App.tsx",["115","116","117","118","119"],"/Users/tksk/api-practice/task_app/src/components/common.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts",[],"/Users/tksk/api-practice/task_app/src/index.tsx",[],"/Users/tksk/api-practice/task_app/src/components/hooks/useDataReducer.ts",[],"/Users/tksk/api-practice/task_app/src/components/auth/AuthHeader.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/search/SearchForm.tsx",["120","121","122"],"import React, { useState } from \"react\";\nimport styles from \"./Search.module.css\";\nimport { TextField } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { SearchRequest } from \"../../requests/SearchRequest\";\nimport { TaskType } from \"../../interfaces/interface\";\n\nexport const SearchForm = () => {\n  const [searchText, setSearchText] = useState(\"\");\n  const [isShown, setIsShown] = useState(false);\n\n  const handleOnSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value);\n    // searchTasks();\n  };\n\n  // const searchTasks = async () => {\n  //   const requetData = {\n  //     data: searchText,\n  //   };\n  //   try {\n  //     const tasks = await SearchRequest(requetData);\n  //   } catch (err) {\n  //     alert(\"通信に失敗しました。\");\n  //   }\n  // };\n\n  return (\n    <>\n      <form className={styles.search_form}>\n        <TextField\n          className={styles.search_field}\n          margin=\"none\"\n          required\n          fullWidth\n          id=\"searchInput\"\n          onClick={(e) => setIsShown(!isShown)}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            handleOnSearch(e)\n          }\n        />\n        <SearchIcon style={{ marginTop: \"7px\", cursor: \"pointer\" }} />\n      </form>\n    </>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/list/List.tsx",["123","124"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/ListModal.tsx",["125","126"],"/Users/tksk/api-practice/task_app/src/components/pages/main/addList/AddList.tsx",["127","128"],"/Users/tksk/api-practice/task_app/src/components/requests/ListRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/home/Home.tsx",["129","130","131","132","133","134"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/FormModal.tsx",["135"],"/Users/tksk/api-practice/task_app/src/components/pages/board/Board.tsx",["136","137"],"import React, { useState, useContext } from \"react\";\nimport { BoardType } from \"../../interfaces/interface\";\nimport styles from \"./Board.module.css\";\nimport { BoardModal } from \"../modal/BoardModal\";\nimport { DataContext } from \"../../../App\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  board: BoardType;\n}\n\nexport const Board: React.FC<Props> = (props) => {\n  const { data } = useContext(DataContext);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [selectBoardId, setSelectBoardId] = useState(null);\n\n  const handleOnBoardModalClose = () => {\n    setIsOpen(!isOpen);\n  };\n\n  // const onCLickBoadrd = (arg) => {\n  //   setSelectBoardId(arg);\n  // };\n\n  return (\n    <div className={styles.board_main}>\n      <div\n        className={styles.new_options}\n        onClick={() => handleOnBoardModalClose()}\n      >\n        <ul>\n          <li>\n            <h4>ボードを作成</h4>\n            <p>\n              ボードは、作成したさまざまなリストに必要な項目を記載したカードを順に並べて使用します。プロジェクト管理や情報の進捗管理など、あらゆることを整理、管理することができます。\n            </p>\n          </li>\n        </ul>\n      </div>\n\n      <div className={styles.all_boards}>\n        <div className={styles.board_list}>\n          {data.boards &&\n            data.boards.map((ele) => {\n              return (\n                <Link\n                  to={\"/main/\" + ele.id}\n                  className={styles.board_link}\n                  key={ele.id}\n                  // onClick={(e: React.MouseEvent) =>\n                  //   onCLickBoadrd(e.targert.value)\n                  // }\n                >\n                  {ele.name}\n                </Link>\n              );\n            })}\n        </div>\n      </div>\n      <BoardModal\n        isOpen={isOpen}\n        handleOnBoardModalClose={handleOnBoardModalClose}\n      />\n    </div>\n  );\n  // const [boardOpen, setBoardOpen] = useState(true);\n  // const [taskAddIsOpen, setTaskAddIsOpen] = useState<boolean>(false);\n  // const [boardName, setBoardName] = useState(props.board.name);\n  // const [taskName, setTaskName] = useState(\"\");\n  // const [isOpen, setIsOpen] = useState(false);\n  // const { data, dispatch } = useContext(DataContext);\n  // const ref = useRef<HTMLDivElement>(null);\n  // const scrollToBottomOfList = React.useCallback(() => {\n  //   if (ref && ref.current) {\n  //     ref.current.scrollIntoView({\n  //       behavior: \"auto\",\n  //       block: \"end\",\n  //     });\n  //   }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [ref]);\n  // const onClickSubmit = async () => {\n  //   const requestTaskData: TaskType = {\n  //     name: taskName,\n  //     board_id: props.board.id,\n  //   };\n  //   try {\n  //     const tasks: TaskType[] = await TaskRequest(\"createTasks\", {\n  //       data: requestTaskData,\n  //     });\n  //     dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n  //     setTaskAddIsOpen(!taskAddIsOpen);\n  //   } catch (err) {\n  //     alert(\"通信に失敗しました。\");\n  //   }\n  //   scrollToBottomOfList();\n  // };\n  // const onKeySubmit = async (e: React.KeyboardEvent) => {\n  //   const requestBoardData: BoardType = {\n  //     id: props.board.id,\n  //     name: boardName,\n  //   };\n  //   if (e.key === \"Enter\") {\n  //     try {\n  //       const boards: BoardType[] = await BoardRequest(\"updateBoards\", {\n  //         data: requestBoardData,\n  //       });\n  //       dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n  //       setBoardOpen(!boardOpen);\n  //     } catch (err) {\n  //       alert(\"通信に失敗しました。\");\n  //     }\n  //   } else {\n  //     return false;\n  //   }\n  // };\n  // const handleOnBoardModalClose = () => {\n  //   setIsOpen(!isOpen);\n  // };\n  // const handleOnBoardOpen = () => {\n  //   setBoardOpen(!boardOpen);\n  //   setBoardName(props.board.name);\n  // };\n  // const clickOnTaskAdd = () => {\n  //   setTaskAddIsOpen(!taskAddIsOpen);\n  // };\n  // return (\n  //   <div className={styles.contents}>\n  //     {boardOpen ? (\n  //       <div className={styles.board_name}>\n  //         <div\n  //           onClick={() => handleOnBoardOpen()}\n  //           className={styles.board_name_title}\n  //         >\n  //           {props.board.name}\n  //         </div>\n  //         <div className={styles.board_icon} onClick={() => setIsOpen(!isOpen)}>\n  //           :\n  //         </div>\n  //         <BoardModal\n  //           isOpen={isOpen}\n  //           board={props.board}\n  //           handleOnBoardModalClose={handleOnBoardModalClose}\n  //           tasks={props.tasks}\n  //         />\n  //       </div>\n  //     ) : (\n  //       <div className={styles.board_name}>\n  //         <textarea\n  //           className={styles.board_textarea}\n  //           placeholder={props.board.name}\n  //           onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n  //             setBoardName(e.target.value);\n  //           }}\n  //           onKeyPress={(e: React.KeyboardEvent) => onKeySubmit(e)}\n  //         />\n  //         <div\n  //           className={styles.board_cancel_btn}\n  //           onClick={() => setBoardOpen(!boardOpen)}\n  //         >\n  //           ×\n  //         </div>\n  //       </div>\n  //     )}\n  //     <div className={styles.task_lists}>\n  //       {props.tasks &&\n  //         props.tasks.map((task: TaskType) => {\n  //           return (\n  //             <div key={task.id}>\n  //               <Task task={task} board={props.board} />\n  //               <div className=\"scroll_ref\" ref={ref}></div>\n  //             </div>\n  //           );\n  //         })}\n  //     </div>\n  //     {taskAddIsOpen ? (\n  //       <>\n  //         <div className={styles.task_field}>\n  //           <textarea\n  //             placeholder=\"カードのタイトルを入力してください\"\n  //             className={styles.task_textarea}\n  //             onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n  //               setTaskName(e.target.value)\n  //             }\n  //           />\n  //         </div>\n  //         <div className={styles.add_submit_form}>\n  //           <input\n  //             type=\"submit\"\n  //             className={styles.add_task_submit}\n  //             value=\"タスクを追加する\"\n  //             onClick={() => onClickSubmit()}\n  //           />\n  //           <div\n  //             className={styles.task_cancel_btn}\n  //             onClick={() => setTaskAddIsOpen(!taskAddIsOpen)}\n  //           >\n  //             ×\n  //           </div>\n  //         </div>\n  //       </>\n  //     ) : (\n  //       <div className={styles.add_task} onClick={() => clickOnTaskAdd()}>\n  //         <div> + タスクを追加する</div>\n  //       </div>\n  //     )}\n  //   </div>\n  // );\n};\n","/Users/tksk/api-practice/task_app/src/components/hooks/useMediaQuery.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardModal.tsx",["138","139","140","141","142","143"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardBody.tsx",["144"],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":3,"column":8,"nodeType":"151","messageId":"152","endLine":3,"endColumn":23},{"ruleId":"149","severity":1,"message":"153","line":2,"column":10,"nodeType":"151","messageId":"152","endLine":2,"endColumn":19},{"ruleId":"149","severity":1,"message":"154","line":1,"column":39,"nodeType":"151","messageId":"152","endLine":1,"endColumn":48},{"ruleId":"149","severity":1,"message":"153","line":4,"column":20,"nodeType":"151","messageId":"152","endLine":4,"endColumn":29},{"ruleId":"149","severity":1,"message":"155","line":12,"column":11,"nodeType":"151","messageId":"152","endLine":12,"endColumn":20},{"ruleId":"149","severity":1,"message":"156","line":16,"column":11,"nodeType":"151","messageId":"152","endLine":16,"endColumn":20},{"ruleId":"149","severity":1,"message":"157","line":21,"column":17,"nodeType":"151","messageId":"152","endLine":21,"endColumn":25},{"ruleId":"149","severity":1,"message":"158","line":3,"column":3,"nodeType":"151","messageId":"152","endLine":3,"endColumn":11},{"ruleId":"149","severity":1,"message":"159","line":4,"column":3,"nodeType":"151","messageId":"152","endLine":4,"endColumn":8},{"ruleId":"149","severity":1,"message":"160","line":5,"column":3,"nodeType":"151","messageId":"152","endLine":5,"endColumn":9},{"ruleId":"149","severity":1,"message":"161","line":41,"column":9,"nodeType":"151","messageId":"152","endLine":41,"endColumn":16},{"ruleId":"162","severity":1,"message":"163","line":91,"column":6,"nodeType":"164","endLine":91,"endColumn":8,"suggestions":"165"},{"ruleId":"149","severity":1,"message":"166","line":5,"column":10,"nodeType":"151","messageId":"152","endLine":5,"endColumn":23},{"ruleId":"149","severity":1,"message":"167","line":6,"column":10,"nodeType":"151","messageId":"152","endLine":6,"endColumn":18},{"ruleId":"149","severity":1,"message":"168","line":9,"column":10,"nodeType":"151","messageId":"152","endLine":9,"endColumn":20},{"ruleId":"149","severity":1,"message":"153","line":2,"column":10,"nodeType":"151","messageId":"152","endLine":2,"endColumn":19},{"ruleId":"149","severity":1,"message":"169","line":23,"column":11,"nodeType":"151","messageId":"152","endLine":23,"endColumn":15},{"ruleId":"149","severity":1,"message":"153","line":3,"column":10,"nodeType":"151","messageId":"152","endLine":3,"endColumn":19},{"ruleId":"149","severity":1,"message":"169","line":53,"column":11,"nodeType":"151","messageId":"152","endLine":53,"endColumn":15},{"ruleId":"149","severity":1,"message":"153","line":5,"column":10,"nodeType":"151","messageId":"152","endLine":5,"endColumn":19},{"ruleId":"149","severity":1,"message":"169","line":14,"column":11,"nodeType":"151","messageId":"152","endLine":14,"endColumn":15},{"ruleId":"149","severity":1,"message":"170","line":1,"column":17,"nodeType":"151","messageId":"152","endLine":1,"endColumn":25},{"ruleId":"149","severity":1,"message":"154","line":1,"column":27,"nodeType":"151","messageId":"152","endLine":1,"endColumn":36},{"ruleId":"149","severity":1,"message":"158","line":3,"column":3,"nodeType":"151","messageId":"152","endLine":3,"endColumn":11},{"ruleId":"149","severity":1,"message":"171","line":6,"column":3,"nodeType":"151","messageId":"152","endLine":6,"endColumn":16},{"ruleId":"149","severity":1,"message":"172","line":7,"column":3,"nodeType":"151","messageId":"152","endLine":7,"endColumn":13},{"ruleId":"149","severity":1,"message":"173","line":9,"column":8,"nodeType":"151","messageId":"152","endLine":9,"endColumn":13},{"ruleId":"149","severity":1,"message":"153","line":4,"column":10,"nodeType":"151","messageId":"152","endLine":4,"endColumn":19},{"ruleId":"149","severity":1,"message":"174","line":16,"column":10,"nodeType":"151","messageId":"152","endLine":16,"endColumn":23},{"ruleId":"149","severity":1,"message":"175","line":16,"column":25,"nodeType":"151","messageId":"152","endLine":16,"endColumn":41},{"ruleId":"149","severity":1,"message":"170","line":1,"column":17,"nodeType":"151","messageId":"152","endLine":1,"endColumn":25},{"ruleId":"149","severity":1,"message":"176","line":1,"column":27,"nodeType":"151","messageId":"152","endLine":1,"endColumn":37},{"ruleId":"149","severity":1,"message":"153","line":4,"column":10,"nodeType":"151","messageId":"152","endLine":4,"endColumn":19},{"ruleId":"149","severity":1,"message":"177","line":5,"column":8,"nodeType":"151","messageId":"152","endLine":5,"endColumn":14},{"ruleId":"149","severity":1,"message":"178","line":22,"column":7,"nodeType":"151","messageId":"152","endLine":22,"endColumn":22},{"ruleId":"149","severity":1,"message":"179","line":44,"column":9,"nodeType":"151","messageId":"152","endLine":44,"endColumn":11},{"ruleId":"149","severity":1,"message":"169","line":14,"column":11,"nodeType":"151","messageId":"152","endLine":14,"endColumn":15},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"@typescript-eslint/no-unused-vars","'DoneOutlineIcon' is defined but never used.","Identifier","unusedVar","'BoardType' is defined but never used.","'useEffect' is defined but never used.","'ListsType' is defined but never used.","'TasksType' is defined but never used.","'dispatch' is assigned a value but never used.","'Redirect' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkLoginStatus'. Either include it or remove the dependency array.","ArrayExpression",["182"],"'SearchRequest' is defined but never used.","'TaskType' is defined but never used.","'searchText' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'BrowserRouter' is defined but never used.","'useHistory' is defined but never used.","'axios' is defined but never used.","'selectBoardId' is assigned a value but never used.","'setSelectBoardId' is assigned a value but never used.","'useContext' is defined but never used.","'styles' is defined but never used.","'forMobileStyles' is assigned a value but never used.","'mq' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},"Update the dependencies array to be: [checkLoginStatus]",{"range":"185","text":"186"},[2702,2704],"[checkLoginStatus]"]