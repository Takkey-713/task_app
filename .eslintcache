[{"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts":"1","/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx":"2","/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx":"3","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx":"4","/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx":"5","/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx":"6","/Users/tksk/api-practice/task_app/src/App.tsx":"7","/Users/tksk/api-practice/task_app/src/components/common.ts":"8","/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts":"9","/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts":"10","/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts":"11","/Users/tksk/api-practice/task_app/src/index.tsx":"12","/Users/tksk/api-practice/task_app/src/components/hooks/useDataReducer.ts":"13","/Users/tksk/api-practice/task_app/src/components/auth/AuthHeader.tsx":"14","/Users/tksk/api-practice/task_app/src/components/pages/search/SearchForm.tsx":"15","/Users/tksk/api-practice/task_app/src/components/pages/main/list/List.tsx":"16","/Users/tksk/api-practice/task_app/src/components/pages/modal/ListModal.tsx":"17","/Users/tksk/api-practice/task_app/src/components/pages/main/addList/AddList.tsx":"18","/Users/tksk/api-practice/task_app/src/components/requests/ListRequest.ts":"19","/Users/tksk/api-practice/task_app/src/components/pages/home/Home.tsx":"20","/Users/tksk/api-practice/task_app/src/components/pages/modal/FormModal.tsx":"21","/Users/tksk/api-practice/task_app/src/components/pages/board/Board.tsx":"22","/Users/tksk/api-practice/task_app/src/components/hooks/useMediaQuery.ts":"23","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardModal.tsx":"24","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardBody.tsx":"25","/Users/tksk/api-practice/task_app/src/components/functions/DataFilter.ts":"26","/Users/tksk/api-practice/task_app/src/components/functions/Guard.ts":"27"},{"size":425,"mtime":1614906242000,"results":"28","hashOfConfig":"29"},{"size":5522,"mtime":1615604811985,"results":"30","hashOfConfig":"29"},{"size":800,"mtime":1614906242000,"results":"31","hashOfConfig":"29"},{"size":1083,"mtime":1615696884852,"results":"32","hashOfConfig":"29"},{"size":5205,"mtime":1615709738281,"results":"33","hashOfConfig":"29"},{"size":2081,"mtime":1615777944380,"results":"34","hashOfConfig":"29"},{"size":2983,"mtime":1615776523568,"results":"35","hashOfConfig":"29"},{"size":124,"mtime":1615357261276,"results":"36","hashOfConfig":"29"},{"size":1314,"mtime":1615428994411,"results":"37","hashOfConfig":"29"},{"size":1494,"mtime":1615710872770,"results":"38","hashOfConfig":"29"},{"size":1370,"mtime":1615357610835,"results":"39","hashOfConfig":"29"},{"size":292,"mtime":1614906242000,"results":"40","hashOfConfig":"29"},{"size":1219,"mtime":1615695784857,"results":"41","hashOfConfig":"29"},{"size":216,"mtime":1615265681000,"results":"42","hashOfConfig":"29"},{"size":1313,"mtime":1615265681000,"results":"43","hashOfConfig":"29"},{"size":5233,"mtime":1615737014056,"results":"44","hashOfConfig":"29"},{"size":7528,"mtime":1615696969208,"results":"45","hashOfConfig":"29"},{"size":2029,"mtime":1615737027373,"results":"46","hashOfConfig":"29"},{"size":1323,"mtime":1615554915677,"results":"47","hashOfConfig":"29"},{"size":647,"mtime":1615736468493,"results":"48","hashOfConfig":"29"},{"size":2122,"mtime":1615696849139,"results":"49","hashOfConfig":"29"},{"size":1830,"mtime":1615730611127,"results":"50","hashOfConfig":"29"},{"size":750,"mtime":1615265681000,"results":"51","hashOfConfig":"29"},{"size":1239,"mtime":1615698864244,"results":"52","hashOfConfig":"29"},{"size":1785,"mtime":1615695724001,"results":"53","hashOfConfig":"29"},{"size":418,"mtime":1615710355274,"results":"54","hashOfConfig":"29"},{"size":240,"mtime":1615777055609,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1h2c9qo",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"81"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts",[],["120","121"],"/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx",[],["122","123"],"/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx",["124"],"import React from \"react\";\nimport styles from \"./Header.module.css\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport { SearchForm } from \"../search/SearchForm\";\n\ninterface Props {\n  handleOnLogout: () => void;\n  isLoggedIn: boolean;\n}\nexport const Header: React.FC<Props> = (props) => {\n  return (\n    <div className={styles.header}>\n      <div className={styles.header_search_area}>\n        <SearchForm />\n      </div>\n\n      <div className={styles.header_title_list}>\n        <div className={styles.header_title}>Task App</div>\n      </div>\n\n      <div className={styles.header_list}>\n        <ul className={styles.ul}>\n          <li className={styles.li} onClick={() => props.handleOnLogout()}>\n            Logout\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx",["125"],"import React, { useState } from \"react\";\nimport { BoardType, TaskType, ListType } from \"../../../interfaces/interface\";\nimport styles from \"./Task.module.css\";\nimport { FormModal } from \"../../modal/FormModal\";\n\ninterface Props {\n  task: TaskType;\n  list: ListType;\n  boardId: number;\n}\n\nexport const Task: React.FC<Props> = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <div\n        className={styles.task_field}\n        onClick={handleOpen}\n        style={{\n          backgroundColor:\n            props.task.deadline_date &&\n            new Date(props.task.deadline_date) < new Date()\n              ? \"rgb(250, 194, 194)\"\n              : \"white\",\n        }}\n      >\n        <div className={styles.task_name}>{props.task.name}</div>\n      </div>\n\n      <FormModal\n        handleClose={handleClose}\n        isOpen={isOpen}\n        task={props.task}\n        list={props.list}\n        boardId={props.boardId}\n      />\n    </>\n  );\n};\n",["126","127"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx",["128"],"/Users/tksk/api-practice/task_app/src/App.tsx",[],"/Users/tksk/api-practice/task_app/src/components/common.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts",[],["129","130"],"/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts",[],"/Users/tksk/api-practice/task_app/src/index.tsx",[],"/Users/tksk/api-practice/task_app/src/components/hooks/useDataReducer.ts",[],"/Users/tksk/api-practice/task_app/src/components/auth/AuthHeader.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/search/SearchForm.tsx",["131","132","133"],"import React, { useState } from \"react\";\nimport styles from \"./Search.module.css\";\nimport { TextField } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { SearchRequest } from \"../../requests/SearchRequest\";\nimport { TaskType } from \"../../interfaces/interface\";\n\nexport const SearchForm = () => {\n  const [searchText, setSearchText] = useState(\"\");\n  const [isShown, setIsShown] = useState(false);\n\n  const handleOnSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value);\n    // searchTasks();\n  };\n\n  // const searchTasks = async () => {\n  //   const requetData = {\n  //     data: searchText,\n  //   };\n  //   try {\n  //     const tasks = await SearchRequest(requetData);\n  //   } catch (err) {\n  //     alert(\"通信に失敗しました。\");\n  //   }\n  // };\n\n  return (\n    <>\n      <form className={styles.search_form}>\n        <TextField\n          className={styles.search_field}\n          margin=\"none\"\n          required\n          fullWidth\n          id=\"searchInput\"\n          onClick={(e) => setIsShown(!isShown)}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            handleOnSearch(e)\n          }\n        />\n        <SearchIcon style={{ marginTop: \"7px\", cursor: \"pointer\" }} />\n      </form>\n    </>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/list/List.tsx",["134","135"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/ListModal.tsx",["136","137"],"import React, { useState, useContext } from \"react\";\nimport Modal from \"react-modal\";\nimport { BoardType, TaskType, ListType } from \"../../interfaces/interface\";\nimport { ListRequest } from \"../../requests/ListRequest\";\nimport { TaskRequest } from \"../../requests/TaskRequest\";\nimport { DataContext } from \"../../../App\";\nimport { FormModal } from \"./FormModal\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport styles from \"./style/ListModal.module.css\";\nimport { useMediaQuery } from \"../../hooks/useMediaQuery\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst forPcStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"10vh\",\n    left: \"30vw\",\n    right: \"30vw\",\n    height: \"80vh\",\n    width: \"40vw\",\n    padding: \"10px\",\n  },\n};\n\nconst forMobileStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"5vh\",\n    left: \"5vw\",\n    right: \"5vw\",\n    height: \"90vh\",\n    width: \"90vw\",\n    padding: \"0\",\n  },\n};\n// モバイル用に変更する\n\ninterface Props {\n  isOpen: boolean;\n  list: ListType;\n  handleOnListModalClose: () => void;\n  tasks?: TaskType[];\n  boardId: number;\n}\n\nModal.setAppElement(\"#root\");\n\nexport const ListModal: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [isTaskOpen, setIsTaskOpen] = useState(false);\n  // 既存のタスクをモーダルで表示するためのstate\n  const [isShown, setIsShown] = useState(false);\n  // 新規タスクを追加するためのモーダルを表示するためのstate\n  const mq = useMediaQuery();\n\n  const handleOnDeleteList = async () => {\n    const requestData = {\n      id: props.list && props.list.id,\n      name: props.list && props.list.name,\n      board_id: Number(props.boardId),\n    };\n    try {\n      const lists: ListType[] = await ListRequest(\"deleteLists\", {\n        data: requestData,\n      });\n\n      props.handleOnListModalClose();\n      dispatch({ type: \"listsUpdate\", payload: { list: lists } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const handleOnDelete = async (task: TaskType) => {\n    const requestData = {\n      id: task.id,\n      name: task.name,\n      list_id: task.list_id,\n      board_id: props.boardId,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"deleteTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const handleOnTaskModal = () => {\n    setIsTaskOpen(!isTaskOpen);\n  };\n\n  const handleAddTaksModal = () => {\n    setIsShown(!isShown);\n  };\n\n  return (\n    <div>\n      {mq.isPc && (\n        <Modal\n          isOpen={props.isOpen}\n          onRequestClose={props.handleOnListModalClose}\n          style={forPcStyles}\n        >\n          <div className={styles.modal_body}>\n            <CloseIcon\n              style={{ cursor: \"pointer\" }}\n              className={styles.task_close_icon}\n              onClick={() => props.handleOnListModalClose()}\n            />\n            <div className={styles.list_title}>{props.list.name}</div>\n            <div className={styles.task_lists}>\n              {props.tasks &&\n                props.tasks.map((task) => {\n                  return (\n                    <div className={styles.task_field} key={task.id}>\n                      <div\n                        className={styles.task_name}\n                        onClick={() => handleOnTaskModal()}\n                      >\n                        {task.name}\n                      </div>\n                      <DeleteIcon\n                        onClick={() => handleOnDelete(task)}\n                        style={{\n                          fontSize: \"20px\",\n                          cursor: \"pointer\",\n                          margin: \"2px 0px 0px 10px\",\n                        }}\n                      />\n                      <FormModal\n                        isOpen={isTaskOpen}\n                        handleClose={handleOnTaskModal}\n                        task={task}\n                        list={props.list}\n                        boardId={props.boardId}\n                        key={task.id}\n                      />\n                    </div>\n                  );\n                })}\n            </div>\n            <div className={styles.add_option}>\n              <button\n                className={styles.add_task_btn}\n                onClick={() => setIsShown(!isShown)}\n              >\n                タスクを追加する\n              </button>\n              <FormModal\n                isOpen={isShown}\n                handleClose={handleAddTaksModal}\n                list={props.list}\n                boardId={props.boardId}\n              />\n              <button\n                className={styles.list_delete_btn}\n                type=\"button\"\n                onClick={handleOnDeleteList}\n              >\n                リストを削除する\n              </button>\n            </div>\n          </div>\n        </Modal>\n      )}\n\n      {mq.isMobile && (\n        <Modal\n          isOpen={props.isOpen}\n          onRequestClose={props.handleOnListModalClose}\n          style={forMobileStyles}\n        >\n          <div className={styles.modal_body}>\n            <CloseIcon\n              style={{ cursor: \"pointer\" }}\n              className={styles.task_close_icon}\n              onClick={() => props.handleOnListModalClose()}\n            />\n            <div className={styles.list_title}>{props.list.name}</div>\n            <div className={styles.task_lists}>\n              {props.tasks &&\n                props.tasks.map((task) => {\n                  return (\n                    <div className={styles.task_field} key={task.id}>\n                      <div\n                        className={styles.task_name}\n                        onClick={() => handleOnTaskModal()}\n                      >\n                        {task.name}\n                      </div>\n                      <DeleteIcon\n                        onClick={() => handleOnDelete(task)}\n                        style={{\n                          fontSize: \"20px\",\n                          cursor: \"pointer\",\n                          margin: \"2px 0px 0px 10px\",\n                        }}\n                      />\n                      <FormModal\n                        isOpen={isTaskOpen}\n                        handleClose={handleOnTaskModal}\n                        task={task}\n                        list={props.list}\n                        key={task.id}\n                        boardId={props.boardId}\n                      />\n                    </div>\n                  );\n                })}\n            </div>\n            <div className={styles.add_option}>\n              <button\n                className={styles.add_task_btn}\n                onClick={() => setIsShown(!isShown)}\n              >\n                タスクを追加する\n              </button>\n              <FormModal\n                isOpen={isShown}\n                handleClose={handleAddTaksModal}\n                list={props.list}\n                boardId={props.boardId}\n              />\n              <button\n                className={styles.list_delete_btn}\n                type=\"button\"\n                onClick={handleOnDeleteList}\n              >\n                リストを削除する\n              </button>\n            </div>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/addList/AddList.tsx",["138","139"],"/Users/tksk/api-practice/task_app/src/components/requests/ListRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/home/Home.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/modal/FormModal.tsx",["140"],"/Users/tksk/api-practice/task_app/src/components/pages/board/Board.tsx",[],"/Users/tksk/api-practice/task_app/src/components/hooks/useMediaQuery.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardModal.tsx",["141","142","143","144","145","146"],"import React, { useState, useContext } from \"react\";\nimport Modal from \"react-modal\";\nimport { BoardBody } from \"./BoardBody\";\nimport { BoardType } from \"../../interfaces/interface\";\nimport styles from \"./style/boardModal.module.css\";\nimport { useMediaQuery } from \"../../hooks/useMediaQuery\";\n\nconst forPcStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"44px\",\n    left: \"35vw\",\n    right: \"35vw\",\n    height: \"15vh\",\n    width: \"30vw\",\n    padding: \"10px\",\n  },\n};\n\nconst forMobileStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"5vh\",\n    left: \"5vw\",\n    right: \"5vw\",\n    height: \"90vh\",\n    width: \"90vw\",\n    padding: \"0\",\n  },\n};\n\ninterface Props {\n  isOpen: boolean;\n  handleOnBoardModalClose: () => void;\n}\n\nModal.setAppElement(\"#root\");\n\nexport const BoardModal: React.FC<Props> = (props) => {\n  const mq = useMediaQuery();\n\n  return (\n    <div>\n      <Modal\n        isOpen={props.isOpen}\n        onRequestClose={props.handleOnBoardModalClose}\n        style={forPcStyles}\n      >\n        <BoardBody\n          isOpen={props.isOpen}\n          handleOnBoardModalClose={props.handleOnBoardModalClose}\n        />\n      </Modal>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardBody.tsx",["147"],"import React, { useState, useContext } from \"react\";\nimport { BoardRequest } from \"../../requests/BoardRequest\";\nimport { BoardType } from \"../../interfaces/interface\";\nimport styles from \"./style/BoardBody.module.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { DataContext } from \"../../../App\";\n\ninterface Props {\n  isOpen: boolean;\n  handleOnBoardModalClose: () => void;\n}\n\nexport const BoardBody: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [boardName, setBoardName] = useState<string>(\"\");\n\n  const onClickCloseIcon = () => {\n    props.handleOnBoardModalClose();\n  };\n\n  const onClickSubmit = async () => {\n    const requestData = {\n      name: boardName,\n    };\n    try {\n      const boards: BoardType[] = await BoardRequest(\"createBoards\", {\n        data: requestData,\n      });\n      props.handleOnBoardModalClose();\n      dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <div className={styles.modal_body}>\n      <div className={styles.textfield}>\n        <textarea\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n            setBoardName(e.target.value);\n          }}\n          className={styles.board_textarea}\n          placeholder=\"ボードタイトルを追加...\"\n        />\n        <CloseIcon\n          style={{\n            cursor: \"pointer\",\n            fontSize: \"14px\",\n            marginLeft: \"5px\",\n          }}\n          onClick={() => onClickCloseIcon()}\n        />\n      </div>\n      <input\n        className={styles.input_submit}\n        type=\"button\"\n        value={\"ボードを追加する\"}\n        onClick={() => onClickSubmit()}\n      />\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/functions/DataFilter.ts",[],"/Users/tksk/api-practice/task_app/src/components/functions/Guard.ts",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"148","replacedBy":"152"},{"ruleId":"150","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":3,"column":8,"nodeType":"156","messageId":"157","endLine":3,"endColumn":23},{"ruleId":"154","severity":1,"message":"158","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":19},{"ruleId":"148","replacedBy":"159"},{"ruleId":"150","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":24,"column":6,"nodeType":"163","endLine":24,"endColumn":8,"suggestions":"164"},{"ruleId":"148","replacedBy":"165"},{"ruleId":"150","replacedBy":"166"},{"ruleId":"154","severity":1,"message":"167","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":23},{"ruleId":"154","severity":1,"message":"168","line":6,"column":10,"nodeType":"156","messageId":"157","endLine":6,"endColumn":18},{"ruleId":"154","severity":1,"message":"169","line":9,"column":10,"nodeType":"156","messageId":"157","endLine":9,"endColumn":20},{"ruleId":"154","severity":1,"message":"158","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":19},{"ruleId":"154","severity":1,"message":"170","line":23,"column":11,"nodeType":"156","messageId":"157","endLine":23,"endColumn":15},{"ruleId":"154","severity":1,"message":"158","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":19},{"ruleId":"154","severity":1,"message":"170","line":53,"column":11,"nodeType":"156","messageId":"157","endLine":53,"endColumn":15},{"ruleId":"154","severity":1,"message":"158","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":19},{"ruleId":"154","severity":1,"message":"170","line":14,"column":11,"nodeType":"156","messageId":"157","endLine":14,"endColumn":15},{"ruleId":"154","severity":1,"message":"158","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":19},{"ruleId":"154","severity":1,"message":"171","line":1,"column":17,"nodeType":"156","messageId":"157","endLine":1,"endColumn":25},{"ruleId":"154","severity":1,"message":"172","line":1,"column":27,"nodeType":"156","messageId":"157","endLine":1,"endColumn":37},{"ruleId":"154","severity":1,"message":"158","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":19},{"ruleId":"154","severity":1,"message":"173","line":5,"column":8,"nodeType":"156","messageId":"157","endLine":5,"endColumn":14},{"ruleId":"154","severity":1,"message":"174","line":22,"column":7,"nodeType":"156","messageId":"157","endLine":22,"endColumn":22},{"ruleId":"154","severity":1,"message":"175","line":44,"column":9,"nodeType":"156","messageId":"157","endLine":44,"endColumn":11},{"ruleId":"154","severity":1,"message":"170","line":14,"column":11,"nodeType":"156","messageId":"157","endLine":14,"endColumn":15},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],["176"],["177"],"@typescript-eslint/no-unused-vars","'DoneOutlineIcon' is defined but never used.","Identifier","unusedVar","'BoardType' is defined but never used.",["176"],["177"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["178"],["176"],["177"],"'SearchRequest' is defined but never used.","'TaskType' is defined but never used.","'searchText' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'styles' is defined but never used.","'forMobileStyles' is assigned a value but never used.","'mq' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"179","fix":"180"},"Update the dependencies array to be: [fetchData]",{"range":"181","text":"182"},[885,887],"[fetchData]"]