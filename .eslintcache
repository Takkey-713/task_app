[{"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts":"1","/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx":"2","/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx":"3","/Users/tksk/api-practice/task_app/src/components/pages/main/board/Board.tsx":"4","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx":"5","/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx":"6","/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx":"7","/Users/tksk/api-practice/task_app/src/App.tsx":"8","/Users/tksk/api-practice/task_app/src/components/common.ts":"9","/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts":"10","/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts":"11","/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts":"12"},{"size":425,"mtime":1614906242000,"results":"13","hashOfConfig":"14"},{"size":5522,"mtime":1615265681000,"results":"15","hashOfConfig":"14"},{"size":800,"mtime":1614906242000,"results":"16","hashOfConfig":"14"},{"size":5036,"mtime":1615265681000,"results":"17","hashOfConfig":"14"},{"size":1026,"mtime":1614906242000,"results":"18","hashOfConfig":"14"},{"size":5021,"mtime":1615358279044,"results":"19","hashOfConfig":"14"},{"size":957,"mtime":1615357051436,"results":"20","hashOfConfig":"14"},{"size":2936,"mtime":1615265681000,"results":"21","hashOfConfig":"14"},{"size":124,"mtime":1615357261276,"results":"22","hashOfConfig":"14"},{"size":1314,"mtime":1615428994411,"results":"23","hashOfConfig":"14"},{"size":1342,"mtime":1615358200142,"results":"24","hashOfConfig":"14"},{"size":1370,"mtime":1615357610835,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h2c9qo",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts",[],"/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx",["53"],"/Users/tksk/api-practice/task_app/src/components/pages/main/board/Board.tsx",["54"],"/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx",[],["55","56"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx",["57"],"import React, { useState, useContext, useEffect } from \"react\";\nimport styles from \"./style/TaskModal.module.css\";\nimport { TaskRequest } from \"../../requests/TaskRequest\";\nimport { TaskType, BoardType } from \"../../interfaces/interface\";\nimport { DataContext } from \"../../../App\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\ninterface Props {\n  task?: TaskType;\n  handleOnClose: () => void;\n  board: BoardType;\n}\n\nexport const TaskBody: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [title, setTitle] = useState<string>(\n    (props.task && props.task.name) || \"\"\n  );\n  const [boardId, setBoardId] = useState<number>(\n    (props.task && props.task.board_id) || props.board.id\n  );\n  const [explanation, setExplanation] = useState<string>(\n    (props.task && props.task.explanation) || \"\"\n  );\n  const [deadlineDate, setDeadlineDate] = useState<string>(\n    (props.task && props.task.deadline_date) || \"\"\n  );\n\n  const onClickSubmit = async () => {\n    const requestData = props.task\n      ? {\n          id: props.task && props.task.id,\n          name: title,\n          board_id: boardId,\n          explanation: explanation,\n          deadline_date: deadlineDate,\n        }\n      : {\n          name: title,\n          board_id: props.board.id,\n          explanation: explanation,\n          deadline_date: deadlineDate,\n        };\n\n    try {\n      const tasks: TaskType[] = await TaskRequest(\n        props.task ? \"updateTasks\" : \"createTasks\",\n        {\n          data: requestData,\n        }\n      );\n      props.handleOnClose();\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const handleOnDelete = async () => {\n    const requestData = {\n      id: props.task && props.task.id,\n      name: title,\n      board_id: boardId,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"deleteTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <form className={styles.modal_body}>\n      <CloseIcon\n        style={{ cursor: \"pointer\" }}\n        className={styles.task_close_icon}\n        onClick={() => props.handleOnClose()}\n      />\n      <div>\n        <h4 className={styles.input_title}>タイトル</h4>\n        <textarea\n          className={styles.textArea}\n          value={title}\n          placeholder=\"タスクのタイトルを入力してください\"\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setTitle(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>説明</h4>\n        <textarea\n          className={styles.textArea}\n          placeholder=\"説明を記入してください\"\n          value={explanation}\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setExplanation(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>期限</h4>\n\n        <input\n          className={styles.input_date}\n          type=\"date\"\n          value={deadlineDate}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setDeadlineDate(e.target.value)\n          }\n        />\n        <div className={styles.deadline_date_msg}>\n          {props.task &&\n          props.task.deadline_date &&\n          new Date(props.task.deadline_date) < new Date()\n            ? \"※期限が過ぎています\"\n            : \"\"}\n        </div>\n        <h4 className={styles.input_title}>リスト</h4>\n        {props.task && (\n          <select\n            className={styles.select}\n            value={props.task?.board_id}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              setBoardId(Number(e.target.value))\n            }\n          >\n            {data.boards &&\n              data.boards.map((board: BoardType) => {\n                return (\n                  <option key={board.id} value={board.id}>\n                    {board.name}\n                  </option>\n                );\n              })}\n          </select>\n        )}\n        {!props.task && (\n          <select\n            className={styles.select}\n            value={props.board.id}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              setBoardId(Number(e.target.value))\n            }\n          >\n            <option value={props.board.id}>{props.board.name}</option>\n          </select>\n        )}\n      </div>\n\n      <input\n        className={styles.input_submit}\n        type=\"button\"\n        value={props.task ? \"タスクを更新する\" : \"タスクを追加する\"}\n        onClick={() => onClickSubmit()}\n      />\n\n      {props.task && (\n        <button\n          className={styles.delete_button}\n          type=\"button\"\n          onClick={handleOnDelete}\n        >\n          タスクを削除する\n        </button>\n      )}\n    </form>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx",["58","59","60"],"/Users/tksk/api-practice/task_app/src/App.tsx",["61"],"import React, { useState, useEffect } from \"react\";\nimport { Home } from \"./components/Home\";\nimport { AuthForm } from \"./components/auth/AuthForm\";\nimport { AuthRequest } from \"./components/requests/AuthRequest\";\nimport { BoardRequest } from \"./components/requests/BoardRequest\";\nimport { TaskRequest } from \"./components/requests/TaskRequest\";\nimport { UserType } from \"./components/interfaces/interface\";\nimport {\n  Data,\n  dataAction,\n  useDataReducer,\n} from \"./components/hooks/useDataReducer\";\n\ntype dataContextType = {\n  data: Data;\n  dispatch: ({ type, payload }: dataAction) => void;\n};\n\nexport const DataContext = React.createContext<dataContextType>(\n  {} as dataContextType\n);\n\nexport const App: React.FC = () => {\n  // ここにtask,board,userのstateを管理する\b\n  const [data, dispatch] = useDataReducer();\n  // eslint-disable-next-line\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState<UserType>({\n    id: 0,\n    email: \"\",\n  });\n  // eslint-disable-next-line\n  // userのstateは本アプリで必要になる\n  const handleOnChangeStatus = (user: UserType): void => {\n    setIsLoggedIn(!isLoggedIn);\n    setUser(user);\n  };\n\n  const handleOnLogout = async () => {\n    try {\n      const res = await AuthRequest(\"sign_out\");\n      if (!res.logged_in) {\n        setIsLoggedIn(!isLoggedIn);\n        setUser({ id: 0, email: \"\" });\n      }\n    } catch {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const checkLoginStatus = async () => {\n    try {\n      const res = await AuthRequest(\"check_login\");\n      if (res.logged_in && isLoggedIn === false) {\n        setIsLoggedIn(true);\n        setUser(res.user);\n      } else if (res.status === 401) {\n        setIsLoggedIn(false);\n      }\n    } catch {\n      alert(\"通信に失敗しました\");\n    }\n  };\n\n  // 初回マウンティングした時にデータベースのボードとタスクを全て持ってくる\n  const fetchData = async () => {\n    const boards = await BoardRequest(\"fetchBoards\");\n    const tasks = await TaskRequest(\"fetchTasks\");\n    dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n    dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n  };\n\n  useEffect(() => {\n    checkLoginStatus();\n  }, []);\n\n  useEffect(() => {\n    checkLoginStatus();\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  useEffect(() => {\n    dispatch({\n      type: \"tasksUpdate\",\n      payload: { task: data.tasks },\n    });\n    // eslint-disable-next-line\n  }, [data.tasks]);\n\n  return (\n    <DataContext.Provider value={{ data, dispatch }}>\n      <>\n        {isLoggedIn ? (\n          <Home isLoggedIn={isLoggedIn} handleOnLogout={handleOnLogout} />\n        ) : (\n          <AuthForm\n            isLoggedIn={isLoggedIn}\n            handleOnChangeStatus={handleOnChangeStatus}\n          />\n        )}\n      </>\n    </DataContext.Provider>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/common.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts",[],{"ruleId":"62","severity":1,"message":"63","line":3,"column":8,"nodeType":"64","messageId":"65","endLine":3,"endColumn":23},{"ruleId":"62","severity":1,"message":"66","line":22,"column":11,"nodeType":"64","messageId":"65","endLine":22,"endColumn":15},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"62","severity":1,"message":"71","line":1,"column":39,"nodeType":"64","messageId":"65","endLine":1,"endColumn":48},{"ruleId":"62","severity":1,"message":"72","line":8,"column":11,"nodeType":"64","messageId":"65","endLine":8,"endColumn":21},{"ruleId":"62","severity":1,"message":"73","line":12,"column":11,"nodeType":"64","messageId":"65","endLine":12,"endColumn":20},{"ruleId":"62","severity":1,"message":"74","line":17,"column":17,"nodeType":"64","messageId":"65","endLine":17,"endColumn":25},{"ruleId":"75","severity":1,"message":"76","line":75,"column":6,"nodeType":"77","endLine":75,"endColumn":8,"suggestions":"78"},"@typescript-eslint/no-unused-vars","'DoneOutlineIcon' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"'useEffect' is defined but never used.","'BoardsType' is defined but never used.","'TasksType' is defined but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkLoginStatus'. Either include it or remove the dependency array.","ArrayExpression",["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [checkLoginStatus]",{"range":"84","text":"85"},[2115,2117],"[checkLoginStatus]"]