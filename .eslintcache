[{"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts":"1","/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx":"2","/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx":"3","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx":"4","/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx":"5","/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx":"6","/Users/tksk/api-practice/task_app/src/App.tsx":"7","/Users/tksk/api-practice/task_app/src/components/common.ts":"8","/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts":"9","/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts":"10","/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts":"11","/Users/tksk/api-practice/task_app/src/index.tsx":"12","/Users/tksk/api-practice/task_app/src/components/hooks/useDataReducer.ts":"13","/Users/tksk/api-practice/task_app/src/components/pages/search/SearchForm.tsx":"14","/Users/tksk/api-practice/task_app/src/components/pages/main/list/List.tsx":"15","/Users/tksk/api-practice/task_app/src/components/pages/modal/ListModal.tsx":"16","/Users/tksk/api-practice/task_app/src/components/pages/main/addList/AddList.tsx":"17","/Users/tksk/api-practice/task_app/src/components/requests/ListRequest.ts":"18","/Users/tksk/api-practice/task_app/src/components/pages/home/Home.tsx":"19","/Users/tksk/api-practice/task_app/src/components/pages/modal/FormModal.tsx":"20","/Users/tksk/api-practice/task_app/src/components/pages/board/Board.tsx":"21","/Users/tksk/api-practice/task_app/src/components/hooks/useMediaQuery.ts":"22","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardModal.tsx":"23","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardBody.tsx":"24","/Users/tksk/api-practice/task_app/src/components/functions/DataFilter.ts":"25","/Users/tksk/api-practice/task_app/src/components/functions/Guard.ts":"26","/Users/tksk/api-practice/task_app/src/components/auth/authHeader/AuthHeader.tsx":"27","/Users/tksk/api-practice/task_app/src/components/functions/OutSideClick.ts":"28","/Users/tksk/api-practice/task_app/src/components/pages/header/menu/HeaderMenu.tsx":"29","/Users/tksk/api-practice/task_app/src/components/pages/main/boardHeader/BoardHeader.tsx":"30","/Users/tksk/api-practice/task_app/src/components/pages/modal/DeleteBoardModal.tsx":"31"},{"size":425,"mtime":1614906242000,"results":"32","hashOfConfig":"33"},{"size":5533,"mtime":1616036572314,"results":"34","hashOfConfig":"33"},{"size":2248,"mtime":1616428175536,"results":"35","hashOfConfig":"33"},{"size":1083,"mtime":1615778225196,"results":"36","hashOfConfig":"33"},{"size":5333,"mtime":1616428175548,"results":"37","hashOfConfig":"33"},{"size":2318,"mtime":1616429684095,"results":"38","hashOfConfig":"33"},{"size":2990,"mtime":1616159926700,"results":"39","hashOfConfig":"33"},{"size":124,"mtime":1615357261276,"results":"40","hashOfConfig":"33"},{"size":1314,"mtime":1615428994411,"results":"41","hashOfConfig":"33"},{"size":1531,"mtime":1616428175553,"results":"42","hashOfConfig":"33"},{"size":1370,"mtime":1615357610835,"results":"43","hashOfConfig":"33"},{"size":292,"mtime":1614906242000,"results":"44","hashOfConfig":"33"},{"size":1219,"mtime":1615778225192,"results":"45","hashOfConfig":"33"},{"size":1313,"mtime":1615265681000,"results":"46","hashOfConfig":"33"},{"size":5098,"mtime":1616157329975,"results":"47","hashOfConfig":"33"},{"size":9697,"mtime":1616408479191,"results":"48","hashOfConfig":"33"},{"size":2018,"mtime":1616260468905,"results":"49","hashOfConfig":"33"},{"size":1323,"mtime":1615778225198,"results":"50","hashOfConfig":"33"},{"size":669,"mtime":1616428175538,"results":"51","hashOfConfig":"33"},{"size":2100,"mtime":1616343448569,"results":"52","hashOfConfig":"33"},{"size":2857,"mtime":1616431425007,"results":"53","hashOfConfig":"33"},{"size":750,"mtime":1616431431738,"results":"54","hashOfConfig":"33"},{"size":1726,"mtime":1616428175544,"results":"55","hashOfConfig":"33"},{"size":1778,"mtime":1616073552361,"results":"56","hashOfConfig":"33"},{"size":418,"mtime":1615778225191,"results":"57","hashOfConfig":"33"},{"size":240,"mtime":1615778225192,"results":"58","hashOfConfig":"33"},{"size":217,"mtime":1615995793472,"results":"59","hashOfConfig":"33"},{"size":199,"mtime":1616428175533,"results":"60","hashOfConfig":"33"},{"size":705,"mtime":1616428175537,"results":"61","hashOfConfig":"33"},{"size":4464,"mtime":1616430276434,"results":"62","hashOfConfig":"33"},{"size":3293,"mtime":1616431481158,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1h2c9qo",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts",[],["135","136"],"/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx",[],["137","138"],"/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx",["139"],"import React, { useState } from \"react\";\nimport { BoardType, TaskType, ListType } from \"../../../interfaces/interface\";\nimport styles from \"./Task.module.css\";\nimport { FormModal } from \"../../modal/FormModal\";\n\ninterface Props {\n  task: TaskType;\n  list: ListType;\n  boardId: number;\n}\n\nexport const Task: React.FC<Props> = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <div\n        className={styles.task_field}\n        onClick={handleOpen}\n        style={{\n          backgroundColor:\n            props.task.deadline_date &&\n            new Date(props.task.deadline_date) < new Date()\n              ? \"rgb(250, 194, 194)\"\n              : \"white\",\n        }}\n      >\n        <div className={styles.task_name}>{props.task.name}</div>\n      </div>\n\n      <FormModal\n        handleClose={handleClose}\n        isOpen={isOpen}\n        task={props.task}\n        list={props.list}\n        boardId={props.boardId}\n      />\n    </>\n  );\n};\n",["140","141"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx",["142"],"/Users/tksk/api-practice/task_app/src/App.tsx",[],"/Users/tksk/api-practice/task_app/src/components/common.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts",[],"/Users/tksk/api-practice/task_app/src/index.tsx",[],"/Users/tksk/api-practice/task_app/src/components/hooks/useDataReducer.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/search/SearchForm.tsx",["143","144","145"],"import React, { useState } from \"react\";\nimport styles from \"./Search.module.css\";\nimport { TextField } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { SearchRequest } from \"../../requests/SearchRequest\";\nimport { TaskType } from \"../../interfaces/interface\";\n\nexport const SearchForm = () => {\n  const [searchText, setSearchText] = useState(\"\");\n  const [isShown, setIsShown] = useState(false);\n\n  const handleOnSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value);\n    // searchTasks();\n  };\n\n  // const searchTasks = async () => {\n  //   const requetData = {\n  //     data: searchText,\n  //   };\n  //   try {\n  //     const tasks = await SearchRequest(requetData);\n  //   } catch (err) {\n  //     alert(\"通信に失敗しました。\");\n  //   }\n  // };\n\n  return (\n    <>\n      <form className={styles.search_form}>\n        <TextField\n          className={styles.search_field}\n          margin=\"none\"\n          required\n          fullWidth\n          id=\"searchInput\"\n          onClick={(e) => setIsShown(!isShown)}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            handleOnSearch(e)\n          }\n        />\n        <SearchIcon style={{ marginTop: \"7px\", cursor: \"pointer\" }} />\n      </form>\n    </>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/list/List.tsx",["146"],"import React, { useState, useContext, useRef } from \"react\";\nimport { TaskType, ListType } from \"../../../interfaces/interface\";\nimport styles from \"./List.module.css\";\nimport { Task } from \"../task/Task\";\nimport { ListRequest } from \"../../../requests/ListRequest\";\nimport { TaskRequest } from \"../../../requests/TaskRequest\";\nimport { DataContext } from \"../../../../App\";\nimport { ListModal } from \"../../../../components/pages/modal/ListModal\";\n\ninterface Props {\n  list: ListType;\n  tasks?: TaskType[];\n  boardId: number;\n}\n\nexport const List: React.FC<Props> = (props) => {\n  const [listOpen, setListOpen] = useState(true);\n  const [taskAddIsOpen, setTaskAddIsOpen] = useState<boolean>(false);\n  const [listName, setListName] = useState(props.list.name);\n  const [taskName, setTaskName] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data, dispatch } = useContext(DataContext);\n  const ref = useRef<HTMLDivElement>(null);\n\n  const scrollToBottomOfList = React.useCallback(() => {\n    if (ref && ref.current) {\n      ref.current.scrollIntoView({\n        behavior: \"auto\",\n        block: \"end\",\n      });\n    }\n  }, [ref]);\n\n  const onClickSubmit = async () => {\n    const requestTaskData: TaskType = {\n      name: taskName,\n      list_id: props.list.id,\n      board_id: Number(props.boardId),\n    };\n\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"createTasks\", {\n        data: requestTaskData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n      setTaskAddIsOpen(!taskAddIsOpen);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n    scrollToBottomOfList();\n    setTaskName(\"\");\n  };\n\n  const onKeySubmit = async (e: React.KeyboardEvent) => {\n    const requestListData: ListType = {\n      id: props.list.id,\n      name: listName,\n      board_id: Number(props.boardId),\n    };\n\n    if (e.key === \"Enter\") {\n      try {\n        const lists: ListType[] = await ListRequest(\"updateLists\", {\n          data: requestListData,\n        });\n        dispatch({ type: \"listsUpdate\", payload: { list: lists } });\n        setListOpen(!listOpen);\n      } catch (err) {\n        alert(\"通信に失敗しました。\");\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const handleOnListModalClose = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOnListOpen = () => {\n    setListOpen(!listOpen);\n    setListName(props.list.name);\n  };\n\n  const clickOnTaskAdd = () => {\n    setTaskAddIsOpen(!taskAddIsOpen);\n  };\n\n  return (\n    <div className={styles.contents}>\n      {listOpen ? (\n        <div className={styles.list_name}>\n          <div\n            onClick={() => handleOnListOpen()}\n            className={styles.list_name_title}\n          >\n            {props.list.name}\n          </div>\n          <div className={styles.list_icon} onClick={() => setIsOpen(!isOpen)}>\n            :\n          </div>\n\n          <ListModal\n            isOpen={isOpen}\n            list={props.list}\n            handleOnListModalClose={handleOnListModalClose}\n            tasks={props.tasks}\n            boardId={props.boardId}\n          />\n        </div>\n      ) : (\n        <div className={styles.list_name}>\n          <textarea\n            className={styles.list_textarea}\n            placeholder={props.list.name}\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setListName(e.target.value);\n            }}\n            onKeyPress={(e: React.KeyboardEvent) => onKeySubmit(e)}\n          />\n\n          <div\n            className={styles.list_cancel_btn}\n            onClick={() => setListOpen(!listOpen)}\n          >\n            ×\n          </div>\n        </div>\n      )}\n      <div className={styles.task_lists}>\n        {props.tasks &&\n          props.tasks.map((task: TaskType) => {\n            return (\n              <div key={task.id}>\n                <Task task={task} list={props.list} boardId={props.boardId} />\n                <div className=\"scroll_ref\" ref={ref}></div>\n              </div>\n            );\n          })}\n      </div>\n      {taskAddIsOpen ? (\n        <>\n          <div className={styles.task_field}>\n            <textarea\n              placeholder=\"カードのタイトルを入力してください\"\n              className={styles.task_textarea}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                setTaskName(e.target.value)\n              }\n            />\n          </div>\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_task_submit}\n              value=\"タスクを追加する\"\n              onClick={() => onClickSubmit()}\n            />\n            <div\n              className={styles.task_cancel_btn}\n              onClick={() => setTaskAddIsOpen(!taskAddIsOpen)}\n            >\n              ×\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className={styles.add_task} onClick={() => clickOnTaskAdd()}>\n          <div> + タスクを追加する</div>\n        </div>\n      )}\n    </div>\n  );\n};\n",["147","148"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/ListModal.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/main/addList/AddList.tsx",["149"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../../App\";\nimport styles from \"./AddList.module.css\";\nimport { ListRequest } from \"../../../requests/ListRequest\";\nimport { ListType } from \"../../../interfaces/interface\";\n\ninterface Props {\n  boardId: number;\n}\n\nexport const AddList: React.FC<Props> = (props) => {\n  const [listDisplay, setListDisplay] = useState(true);\n  const [name, setName] = useState(\"\");\n  const { data, dispatch } = useContext(DataContext);\n\n  const newData: ListType = {\n    id: 0,\n    name: name,\n    board_id: Number(props.boardId),\n  };\n\n  const onClickSubmit = async () => {\n    try {\n      const lists: ListType[] = await ListRequest(\"createLists\", {\n        data: newData,\n      });\n      dispatch({ type: \"listsUpdate\", payload: { list: lists } });\n      setListDisplay(!listDisplay);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n    setName(\"\");\n  };\n\n  return (\n    <>\n      {listDisplay ? (\n        <div\n          className={styles.add_list}\n          onClick={() => setListDisplay(!listDisplay)}\n        >\n          <div>\n            <span>+</span> <span>リストを追加する</span>\n          </div>\n        </div>\n      ) : (\n        <div className={styles.add_list_form}>\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setName(e.target.value);\n            }}\n            className={styles.list_textarea}\n            placeholder=\"リストのタイトルを入力...\"\n          />\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_list_submit}\n              value=\"リストを追加\"\n              onClick={onClickSubmit}\n            />\n            <div\n              className={styles.cancel_icon}\n              onClick={() => setListDisplay(!listDisplay)}\n            >\n              ×\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/requests/ListRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/home/Home.tsx",["150"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/FormModal.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/board/Board.tsx",[],"/Users/tksk/api-practice/task_app/src/components/hooks/useMediaQuery.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardModal.tsx",["151","152","153","154"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardBody.tsx",[],"/Users/tksk/api-practice/task_app/src/components/functions/DataFilter.ts",[],["155","156"],"/Users/tksk/api-practice/task_app/src/components/functions/Guard.ts",[],"/Users/tksk/api-practice/task_app/src/components/auth/authHeader/AuthHeader.tsx",[],"/Users/tksk/api-practice/task_app/src/components/functions/OutSideClick.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/header/menu/HeaderMenu.tsx",["157"],"/Users/tksk/api-practice/task_app/src/components/pages/main/boardHeader/BoardHeader.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/modal/DeleteBoardModal.tsx",["158"],{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"159","replacedBy":"163"},{"ruleId":"161","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":19},{"ruleId":"159","replacedBy":"169"},{"ruleId":"161","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":25,"column":6,"nodeType":"173","endLine":25,"endColumn":8,"suggestions":"174"},{"ruleId":"165","severity":1,"message":"175","line":5,"column":10,"nodeType":"167","messageId":"168","endLine":5,"endColumn":23},{"ruleId":"165","severity":1,"message":"176","line":6,"column":10,"nodeType":"167","messageId":"168","endLine":6,"endColumn":18},{"ruleId":"165","severity":1,"message":"177","line":9,"column":10,"nodeType":"167","messageId":"168","endLine":9,"endColumn":20},{"ruleId":"165","severity":1,"message":"178","line":23,"column":11,"nodeType":"167","messageId":"168","endLine":23,"endColumn":15},{"ruleId":"159","replacedBy":"179"},{"ruleId":"161","replacedBy":"180"},{"ruleId":"165","severity":1,"message":"178","line":14,"column":11,"nodeType":"167","messageId":"168","endLine":14,"endColumn":15},{"ruleId":"165","severity":1,"message":"181","line":6,"column":10,"nodeType":"167","messageId":"168","endLine":6,"endColumn":13},{"ruleId":"165","severity":1,"message":"182","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"183","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":37},{"ruleId":"165","severity":1,"message":"166","line":4,"column":10,"nodeType":"167","messageId":"168","endLine":4,"endColumn":19},{"ruleId":"165","severity":1,"message":"184","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":14},{"ruleId":"159","replacedBy":"185"},{"ruleId":"161","replacedBy":"186"},{"ruleId":"165","severity":1,"message":"182","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"182","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],["187"],["188"],"@typescript-eslint/no-unused-vars","'BoardType' is defined but never used.","Identifier","unusedVar",["187"],["188"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'SearchRequest' is defined but never used.","'TaskType' is defined but never used.","'searchText' is assigned a value but never used.","'data' is assigned a value but never used.",["187"],["188"],"'url' is defined but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'styles' is defined but never used.",["187"],["188"],"no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},"Update the dependencies array to be: [fetchData]",{"range":"192","text":"193"},[942,944],"[fetchData]"]