[{"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts":"1","/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx":"2","/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx":"3","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx":"4","/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx":"5","/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx":"6","/Users/tksk/api-practice/task_app/src/App.tsx":"7","/Users/tksk/api-practice/task_app/src/components/common.ts":"8","/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts":"9","/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts":"10","/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts":"11","/Users/tksk/api-practice/task_app/src/index.tsx":"12","/Users/tksk/api-practice/task_app/src/components/hooks/useDataReducer.ts":"13","/Users/tksk/api-practice/task_app/src/components/auth/AuthHeader.tsx":"14","/Users/tksk/api-practice/task_app/src/components/pages/search/SearchForm.tsx":"15","/Users/tksk/api-practice/task_app/src/components/pages/main/list/List.tsx":"16","/Users/tksk/api-practice/task_app/src/components/pages/modal/ListModal.tsx":"17","/Users/tksk/api-practice/task_app/src/components/pages/main/addList/AddList.tsx":"18","/Users/tksk/api-practice/task_app/src/components/requests/ListRequest.ts":"19","/Users/tksk/api-practice/task_app/src/components/pages/home/Home.tsx":"20","/Users/tksk/api-practice/task_app/src/components/pages/modal/FormModal.tsx":"21","/Users/tksk/api-practice/task_app/src/components/pages/board/Board.tsx":"22","/Users/tksk/api-practice/task_app/src/components/hooks/useMediaQuery.ts":"23","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardModal.tsx":"24","/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardBody.tsx":"25"},{"size":425,"mtime":1614906242000,"results":"26","hashOfConfig":"27"},{"size":5522,"mtime":1615604811985,"results":"28","hashOfConfig":"27"},{"size":800,"mtime":1614906242000,"results":"29","hashOfConfig":"27"},{"size":1032,"mtime":1615551677008,"results":"30","hashOfConfig":"27"},{"size":4993,"mtime":1615551963550,"results":"31","hashOfConfig":"27"},{"size":956,"mtime":1615554572918,"results":"32","hashOfConfig":"27"},{"size":3677,"mtime":1615636781727,"results":"33","hashOfConfig":"27"},{"size":124,"mtime":1615357261276,"results":"34","hashOfConfig":"27"},{"size":1314,"mtime":1615428994411,"results":"35","hashOfConfig":"27"},{"size":1342,"mtime":1615358200142,"results":"36","hashOfConfig":"27"},{"size":1370,"mtime":1615357610835,"results":"37","hashOfConfig":"27"},{"size":292,"mtime":1614906242000,"results":"38","hashOfConfig":"27"},{"size":1185,"mtime":1615621931152,"results":"39","hashOfConfig":"27"},{"size":216,"mtime":1615265681000,"results":"40","hashOfConfig":"27"},{"size":1313,"mtime":1615265681000,"results":"41","hashOfConfig":"27"},{"size":5104,"mtime":1615552966465,"results":"42","hashOfConfig":"27"},{"size":7263,"mtime":1615553079345,"results":"43","hashOfConfig":"27"},{"size":1913,"mtime":1615553343426,"results":"44","hashOfConfig":"27"},{"size":1323,"mtime":1615554915677,"results":"45","hashOfConfig":"27"},{"size":871,"mtime":1615623058791,"results":"46","hashOfConfig":"27"},{"size":1871,"mtime":1615551814873,"results":"47","hashOfConfig":"27"},{"size":6917,"mtime":1615632290449,"results":"48","hashOfConfig":"27"},{"size":750,"mtime":1615265681000,"results":"49","hashOfConfig":"27"},{"size":1239,"mtime":1615645386305,"results":"50","hashOfConfig":"27"},{"size":1785,"mtime":1615644407782,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h2c9qo",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"69"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tksk/api-practice/task_app/src/reportWebVitals.ts",[],"/Users/tksk/api-practice/task_app/src/components/auth/AuthForm.tsx",[],["115","116"],"/Users/tksk/api-practice/task_app/src/components/pages/header/Header.tsx",["117"],"import React from \"react\";\nimport styles from \"./Header.module.css\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport { SearchForm } from \"../search/SearchForm\";\n\ninterface Props {\n  handleOnLogout: () => void;\n  isLoggedIn: boolean;\n}\nexport const Header: React.FC<Props> = (props) => {\n  return (\n    <div className={styles.header}>\n      <div className={styles.header_search_area}>\n        <SearchForm />\n      </div>\n\n      <div className={styles.header_title_list}>\n        <div className={styles.header_title}>Task App</div>\n      </div>\n\n      <div className={styles.header_list}>\n        <ul className={styles.ul}>\n          <li className={styles.li} onClick={() => props.handleOnLogout()}>\n            Logout\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/task/Task.tsx",["118"],"import React, { useState } from \"react\";\nimport { BoardType, TaskType, ListType } from \"../../../interfaces/interface\";\nimport styles from \"./Task.module.css\";\nimport { FormModal } from \"../../modal/FormModal\";\n\ninterface Props {\n  task: TaskType;\n  list: ListType;\n}\n\nexport const Task: React.FC<Props> = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <div\n        className={styles.task_field}\n        onClick={handleOpen}\n        style={{\n          backgroundColor:\n            props.task.deadline_date &&\n            new Date(props.task.deadline_date) < new Date()\n              ? \"rgb(250, 194, 194)\"\n              : \"white\",\n        }}\n      >\n        <div className={styles.task_name}>{props.task.name}</div>\n      </div>\n\n      <FormModal\n        handleClose={handleClose}\n        isOpen={isOpen}\n        task={props.task}\n        list={props.list}\n      />\n    </>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/modal/TaskBody.tsx",["119","120"],"import React, { useState, useContext, useEffect } from \"react\";\nimport styles from \"./style/TaskModal.module.css\";\nimport { TaskRequest } from \"../../requests/TaskRequest\";\nimport { TaskType, BoardType, ListType } from \"../../interfaces/interface\";\nimport { DataContext } from \"../../../App\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\ninterface Props {\n  task?: TaskType;\n  handleOnClose: () => void;\n  list: ListType;\n}\n\nexport const TaskBody: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [title, setTitle] = useState<string>(\n    (props.task && props.task.name) || \"\"\n  );\n  const [listId, setListId] = useState<number>(\n    (props.task && props.task.list_id) || props.list.id\n  );\n  const [explanation, setExplanation] = useState<string>(\n    (props.task && props.task.explanation) || \"\"\n  );\n  const [deadlineDate, setDeadlineDate] = useState<string>(\n    (props.task && props.task.deadline_date) || \"\"\n  );\n\n  const onClickSubmit = async () => {\n    const requestData = props.task\n      ? {\n          id: props.task && props.task.id,\n          name: title,\n          list_id: listId,\n          explanation: explanation,\n          deadline_date: deadlineDate,\n        }\n      : {\n          name: title,\n          list_id: props.list.id,\n          explanation: explanation,\n          deadline_date: deadlineDate,\n        };\n\n    try {\n      const tasks: TaskType[] = await TaskRequest(\n        props.task ? \"updateTasks\" : \"createTasks\",\n        {\n          data: requestData,\n        }\n      );\n      props.handleOnClose();\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const handleOnDelete = async () => {\n    const requestData = {\n      id: props.task && props.task.id,\n      name: title,\n      list_id: listId,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"deleteTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <form className={styles.modal_body}>\n      <CloseIcon\n        style={{ cursor: \"pointer\" }}\n        className={styles.task_close_icon}\n        onClick={() => props.handleOnClose()}\n      />\n      <div>\n        <h4 className={styles.input_title}>タイトル</h4>\n        <textarea\n          className={styles.textArea}\n          value={title}\n          placeholder=\"タスクのタイトルを入力してください\"\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setTitle(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>説明</h4>\n        <textarea\n          className={styles.textArea}\n          placeholder=\"説明を記入してください\"\n          value={explanation}\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setExplanation(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>期限</h4>\n\n        <input\n          className={styles.input_date}\n          type=\"date\"\n          value={deadlineDate}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setDeadlineDate(e.target.value)\n          }\n        />\n        <div className={styles.deadline_date_msg}>\n          {props.task &&\n          props.task.deadline_date &&\n          new Date(props.task.deadline_date) < new Date()\n            ? \"※期限が過ぎています\"\n            : \"\"}\n        </div>\n        <h4 className={styles.input_title}>リスト</h4>\n        {props.task && (\n          <select\n            className={styles.select}\n            value={listId}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              setListId(Number(e.target.value))\n            }\n          >\n            {data.lists &&\n              data.lists.map((list: ListType) => {\n                return (\n                  <option key={list.id} value={list.id}>\n                    {list.name}\n                  </option>\n                );\n              })}\n          </select>\n        )}\n        {!props.task && (\n          <select\n            className={styles.select}\n            value={props.list.id}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              setListId(Number(e.target.value))\n            }\n          >\n            <option value={props.list.id}>{props.list.name}</option>\n          </select>\n        )}\n      </div>\n\n      <input\n        className={styles.input_submit}\n        type=\"button\"\n        value={props.task ? \"タスクを更新する\" : \"タスクを追加する\"}\n        onClick={() => onClickSubmit()}\n      />\n\n      {props.task && (\n        <button\n          className={styles.delete_button}\n          type=\"button\"\n          onClick={handleOnDelete}\n        >\n          タスクを削除する\n        </button>\n      )}\n    </form>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/Main.tsx",["121","122","123","124"],"import React, { useContext } from \"react\";\nimport { DataContext } from \"../../../App\";\nimport { List } from \"./list/List\";\nimport { BoardType, TaskType, ListType } from \"../../interfaces/interface\";\nimport styles from \"./Main.module.css\";\nimport { AddList } from \"../main/addList/AddList\";\n\ninterface ListsType {\n  lists: ListType[];\n}\n\ninterface TasksType {\n  tasks: TaskType[];\n}\n\nexport const Main = () => {\n  const { data, dispatch } = useContext(DataContext);\n  return (\n    <div className={styles.main}>\n      {data.lists &&\n        data.lists.map((ele) => {\n          const tasks = data.tasks.filter((task) => {\n            return task.list_id === ele.id;\n          });\n          return (\n            <div key={ele.id} className={styles.list_lists}>\n              <List tasks={tasks} list={ele} key={ele.id} />\n            </div>\n          );\n        })}\n      <div className={styles.list_lists}>\n        <AddList />\n      </div>\n    </div>\n  );\n};\n",["125","126"],"/Users/tksk/api-practice/task_app/src/App.tsx",["127","128","129","130","131"],"/Users/tksk/api-practice/task_app/src/components/common.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/AuthRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/BoardRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/requests/TaskRequest.ts",[],"/Users/tksk/api-practice/task_app/src/index.tsx",[],"/Users/tksk/api-practice/task_app/src/components/hooks/useDataReducer.ts",[],"/Users/tksk/api-practice/task_app/src/components/auth/AuthHeader.tsx",[],"/Users/tksk/api-practice/task_app/src/components/pages/search/SearchForm.tsx",["132","133","134"],"import React, { useState } from \"react\";\nimport styles from \"./Search.module.css\";\nimport { TextField } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { SearchRequest } from \"../../requests/SearchRequest\";\nimport { TaskType } from \"../../interfaces/interface\";\n\nexport const SearchForm = () => {\n  const [searchText, setSearchText] = useState(\"\");\n  const [isShown, setIsShown] = useState(false);\n\n  const handleOnSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value);\n    // searchTasks();\n  };\n\n  // const searchTasks = async () => {\n  //   const requetData = {\n  //     data: searchText,\n  //   };\n  //   try {\n  //     const tasks = await SearchRequest(requetData);\n  //   } catch (err) {\n  //     alert(\"通信に失敗しました。\");\n  //   }\n  // };\n\n  return (\n    <>\n      <form className={styles.search_form}>\n        <TextField\n          className={styles.search_field}\n          margin=\"none\"\n          required\n          fullWidth\n          id=\"searchInput\"\n          onClick={(e) => setIsShown(!isShown)}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            handleOnSearch(e)\n          }\n        />\n        <SearchIcon style={{ marginTop: \"7px\", cursor: \"pointer\" }} />\n      </form>\n    </>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/list/List.tsx",["135","136"],"import React, { useState, useContext, useRef } from \"react\";\nimport { BoardType, TaskType, ListType } from \"../../../interfaces/interface\";\nimport styles from \"./List.module.css\";\nimport { Task } from \"../task/Task\";\nimport { ListRequest } from \"../../../requests/ListRequest\";\nimport { TaskRequest } from \"../../../requests/TaskRequest\";\nimport { DataContext } from \"../../../../App\";\nimport { ListModal } from \"../../../../components/pages/modal/ListModal\";\n// リストモーダルへ名前を変更する0\ninterface Props {\n  list: ListType;\n  tasks?: TaskType[];\n}\n\nexport const List: React.FC<Props> = (props) => {\n  const [listOpen, setListOpen] = useState(true);\n  const [taskAddIsOpen, setTaskAddIsOpen] = useState<boolean>(false);\n  const [listName, setListName] = useState(props.list.name);\n  const [taskName, setTaskName] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data, dispatch } = useContext(DataContext);\n  const ref = useRef<HTMLDivElement>(null);\n\n  const scrollToBottomOfList = React.useCallback(() => {\n    if (ref && ref.current) {\n      ref.current.scrollIntoView({\n        behavior: \"auto\",\n        block: \"end\",\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref]);\n\n  const onClickSubmit = async () => {\n    const requestTaskData: TaskType = {\n      name: taskName,\n      list_id: props.list.id,\n    };\n\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"createTasks\", {\n        data: requestTaskData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n      setTaskAddIsOpen(!taskAddIsOpen);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n    scrollToBottomOfList();\n  };\n\n  const onKeySubmit = async (e: React.KeyboardEvent) => {\n    const requestListData: ListType = {\n      id: props.list.id,\n      name: listName,\n    };\n\n    if (e.key === \"Enter\") {\n      try {\n        const lists: ListType[] = await ListRequest(\"updateLists\", {\n          data: requestListData,\n        });\n        dispatch({ type: \"listsUpdate\", payload: { list: lists } });\n        setListOpen(!listOpen);\n      } catch (err) {\n        alert(\"通信に失敗しました。\");\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const handleOnListModalClose = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOnListOpen = () => {\n    setListOpen(!listOpen);\n    setListName(props.list.name);\n  };\n\n  const clickOnTaskAdd = () => {\n    setTaskAddIsOpen(!taskAddIsOpen);\n  };\n\n  return (\n    <div className={styles.contents}>\n      {listOpen ? (\n        <div className={styles.list_name}>\n          <div\n            onClick={() => handleOnListOpen()}\n            className={styles.list_name_title}\n          >\n            {props.list.name}\n          </div>\n          <div className={styles.list_icon} onClick={() => setIsOpen(!isOpen)}>\n            :\n          </div>\n\n          <ListModal\n            isOpen={isOpen}\n            list={props.list}\n            handleOnListModalClose={handleOnListModalClose}\n            tasks={props.tasks}\n          />\n          {/* リストモーダルへ名前を変更する */}\n        </div>\n      ) : (\n        <div className={styles.list_name}>\n          <textarea\n            className={styles.list_textarea}\n            placeholder={props.list.name}\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setListName(e.target.value);\n            }}\n            onKeyPress={(e: React.KeyboardEvent) => onKeySubmit(e)}\n          />\n\n          <div\n            className={styles.list_cancel_btn}\n            onClick={() => setListOpen(!listOpen)}\n          >\n            ×\n          </div>\n        </div>\n      )}\n      <div className={styles.task_lists}>\n        {props.tasks &&\n          props.tasks.map((task: TaskType) => {\n            return (\n              <div key={task.id}>\n                <Task task={task} list={props.list} />\n                <div className=\"scroll_ref\" ref={ref}></div>\n              </div>\n            );\n          })}\n      </div>\n      {taskAddIsOpen ? (\n        <>\n          <div className={styles.task_field}>\n            <textarea\n              placeholder=\"カードのタイトルを入力してください\"\n              className={styles.task_textarea}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                setTaskName(e.target.value)\n              }\n            />\n          </div>\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_task_submit}\n              value=\"タスクを追加する\"\n              onClick={() => onClickSubmit()}\n            />\n            <div\n              className={styles.task_cancel_btn}\n              onClick={() => setTaskAddIsOpen(!taskAddIsOpen)}\n            >\n              ×\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className={styles.add_task} onClick={() => clickOnTaskAdd()}>\n          <div> + タスクを追加する</div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/modal/ListModal.tsx",["137","138"],"import React, { useState, useContext } from \"react\";\nimport Modal from \"react-modal\";\nimport { BoardType, TaskType, ListType } from \"../../interfaces/interface\";\nimport { ListRequest } from \"../../requests/ListRequest\";\nimport { TaskRequest } from \"../../requests/TaskRequest\";\nimport { DataContext } from \"../../../App\";\nimport { FormModal } from \"./FormModal\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport styles from \"./style/ListModal.module.css\";\nimport { useMediaQuery } from \"../../hooks/useMediaQuery\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst forPcStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"10vh\",\n    left: \"30vw\",\n    right: \"30vw\",\n    height: \"80vh\",\n    width: \"40vw\",\n    padding: \"10px\",\n  },\n};\n\nconst forMobileStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"5vh\",\n    left: \"5vw\",\n    right: \"5vw\",\n    height: \"90vh\",\n    width: \"90vw\",\n    padding: \"0\",\n  },\n};\n// モバイル用に変更する\n\ninterface Props {\n  isOpen: boolean;\n  list: ListType;\n  handleOnListModalClose: () => void;\n  tasks?: TaskType[];\n}\n\nModal.setAppElement(\"#root\");\n\nexport const ListModal: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [isTaskOpen, setIsTaskOpen] = useState(false);\n  // 既存のタスクをモーダルで表示するためのstate\n  const [isShown, setIsShown] = useState(false);\n  // 新規タスクを追加するためのモーダルを表示するためのstate\n  const mq = useMediaQuery();\n\n  const handleOnDeleteList = async () => {\n    const requestData = {\n      id: props.list && props.list.id,\n      name: props.list && props.list.name,\n    };\n    try {\n      const lists: ListType[] = await ListRequest(\"deleteLists\", {\n        data: requestData,\n      });\n\n      props.handleOnListModalClose();\n      dispatch({ type: \"listsUpdate\", payload: { list: lists } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const handleOnDelete = async (task: TaskType) => {\n    const requestData = {\n      id: task.id,\n      name: task.name,\n      list_id: task.list_id,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"deleteTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const handleOnTaskModal = () => {\n    setIsTaskOpen(!isTaskOpen);\n  };\n\n  const handleAddTaksModal = () => {\n    setIsShown(!isShown);\n  };\n\n  return (\n    <div>\n      {mq.isPc && (\n        <Modal\n          isOpen={props.isOpen}\n          onRequestClose={props.handleOnListModalClose}\n          style={forPcStyles}\n        >\n          <div className={styles.modal_body}>\n            <CloseIcon\n              style={{ cursor: \"pointer\" }}\n              className={styles.task_close_icon}\n              onClick={() => props.handleOnListModalClose()}\n            />\n            <div className={styles.list_title}>{props.list.name}</div>\n            <div className={styles.task_lists}>\n              {props.tasks &&\n                props.tasks.map((task) => {\n                  return (\n                    <div className={styles.task_field} key={task.id}>\n                      <div\n                        className={styles.task_name}\n                        onClick={() => handleOnTaskModal()}\n                      >\n                        {task.name}\n                      </div>\n                      <DeleteIcon\n                        onClick={() => handleOnDelete(task)}\n                        style={{\n                          fontSize: \"20px\",\n                          cursor: \"pointer\",\n                          margin: \"2px 0px 0px 10px\",\n                        }}\n                      />\n                      <FormModal\n                        isOpen={isTaskOpen}\n                        handleClose={handleOnTaskModal}\n                        task={task}\n                        list={props.list}\n                        key={task.id}\n                      />\n                    </div>\n                  );\n                })}\n            </div>\n            <div className={styles.add_option}>\n              <button\n                className={styles.add_task_btn}\n                onClick={() => setIsShown(!isShown)}\n              >\n                タスクを追加する\n              </button>\n              <FormModal\n                isOpen={isShown}\n                handleClose={handleAddTaksModal}\n                list={props.list}\n              />\n              <button\n                className={styles.list_delete_btn}\n                type=\"button\"\n                onClick={handleOnDeleteList}\n              >\n                リストを削除する\n              </button>\n            </div>\n          </div>\n        </Modal>\n      )}\n\n      {mq.isMobile && (\n        <Modal\n          isOpen={props.isOpen}\n          onRequestClose={props.handleOnListModalClose}\n          style={forMobileStyles}\n        >\n          <div className={styles.modal_body}>\n            <CloseIcon\n              style={{ cursor: \"pointer\" }}\n              className={styles.task_close_icon}\n              onClick={() => props.handleOnListModalClose()}\n            />\n            <div className={styles.list_title}>{props.list.name}</div>\n            <div className={styles.task_lists}>\n              {props.tasks &&\n                props.tasks.map((task) => {\n                  return (\n                    <div className={styles.task_field} key={task.id}>\n                      <div\n                        className={styles.task_name}\n                        onClick={() => handleOnTaskModal()}\n                      >\n                        {task.name}\n                      </div>\n                      <DeleteIcon\n                        onClick={() => handleOnDelete(task)}\n                        style={{\n                          fontSize: \"20px\",\n                          cursor: \"pointer\",\n                          margin: \"2px 0px 0px 10px\",\n                        }}\n                      />\n                      <FormModal\n                        isOpen={isTaskOpen}\n                        handleClose={handleOnTaskModal}\n                        task={task}\n                        list={props.list}\n                        key={task.id}\n                      />\n                    </div>\n                  );\n                })}\n            </div>\n            <div className={styles.add_option}>\n              <button\n                className={styles.add_task_btn}\n                onClick={() => setIsShown(!isShown)}\n              >\n                タスクを追加する\n              </button>\n              <FormModal\n                isOpen={isShown}\n                handleClose={handleAddTaksModal}\n                list={props.list}\n              />\n              <button\n                className={styles.list_delete_btn}\n                type=\"button\"\n                onClick={handleOnDeleteList}\n              >\n                リストを削除する\n              </button>\n            </div>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/main/addList/AddList.tsx",["139","140"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../../App\";\nimport styles from \"./AddList.module.css\";\nimport { ListRequest } from \"../../../requests/ListRequest\";\nimport { BoardType, ListType } from \"../../../interfaces/interface\";\n\nexport const AddList = () => {\n  const [listDisplay, setListDisplay] = useState(true);\n  const [name, setName] = useState(\"\");\n  const { data, dispatch } = useContext(DataContext);\n\n  const newData: ListType = {\n    id: 0,\n    name: name,\n  };\n\n  const onClickSubmit = async () => {\n    try {\n      const lists: ListType[] = await ListRequest(\"createLists\", {\n        data: newData,\n      });\n      dispatch({ type: \"listsUpdate\", payload: { list: lists } });\n      setListDisplay(!listDisplay);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <>\n      {listDisplay ? (\n        <div\n          className={styles.add_list}\n          onClick={() => setListDisplay(!listDisplay)}\n        >\n          <div>\n            <span>+</span> <span>リストを追加する</span>\n          </div>\n        </div>\n      ) : (\n        <div className={styles.add_list_form}>\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setName(e.target.value);\n            }}\n            className={styles.list_textarea}\n            placeholder=\"リストのタイトルを入力...\"\n          />\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_list_submit}\n              value=\"リストを追加\"\n              onClick={onClickSubmit}\n            />\n            <div\n              className={styles.cancel_icon}\n              onClick={() => setListDisplay(!listDisplay)}\n            >\n              ×\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/requests/ListRequest.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/home/Home.tsx",["141","142","143","144","145","146"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Redirect,\n  Route,\n  Switch,\n  BrowserRouter,\n  useHistory,\n} from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Header } from \"../header/Header\";\nimport { Board } from \"../board/Board\";\nimport { Main } from \"../main/Main\";\nimport \"./Home.css\";\n\ninterface Props {\n  isLoggedIn: boolean;\n  handleOnLogout: () => void;\n}\n\nexport const Home: React.FC<Props> = (props) => {\n  return (\n    <div className=\"main\">\n      <Header\n        handleOnLogout={props.handleOnLogout}\n        isLoggedIn={props.isLoggedIn}\n      />\n      <Switch>\n        <Route exact path=\"/\" component={Board} />\n        <Route path=\"/main/:id\" component={Main} />\n      </Switch>\n      {/* <Main /> */}\n      {/* react-routerでHomeの中身を分けるので上記Mainコンポーネントは削除する */}\n    </div>\n  );\n};\n","/Users/tksk/api-practice/task_app/src/components/pages/modal/FormModal.tsx",["147"],"import React from \"react\";\nimport Modal from \"react-modal\";\nimport { TaskBody } from \"./TaskBody\";\nimport { BoardType, TaskType, ListType } from \"../../interfaces/interface\";\nimport { useMediaQuery } from \"../../hooks/useMediaQuery\";\n\nconst forPcStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"10vh\",\n    left: \"30vw\",\n    right: \"30vw\",\n    height: \"80vh\",\n    width: \"40vw\",\n    padding: \"10px\",\n  },\n};\n\nconst forMobileStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"5vh\",\n    left: \"5vw\",\n    right: \"5vw\",\n    height: \"90vh\",\n    width: \"90vw\",\n    padding: \"0\",\n  },\n};\n\ninterface Props {\n  handleClose: () => void;\n  isOpen: boolean;\n  task?: TaskType;\n  list: ListType;\n}\n\nexport const FormModal = (props: Props) => {\n  Modal.setAppElement(\"#root\");\n  const mq = useMediaQuery();\n\n  return (\n    <div>\n      {mq.isPc && (\n        <Modal\n          isOpen={props.isOpen}\n          onRequestClose={props.handleClose}\n          style={forPcStyles}\n        >\n          {props.task ? (\n            <TaskBody\n              task={props.task}\n              handleOnClose={props.handleClose}\n              list={props.list}\n            />\n          ) : (\n            <TaskBody handleOnClose={props.handleClose} list={props.list} />\n          )}\n        </Modal>\n      )}\n\n      {mq.isMobile && (\n        <Modal\n          isOpen={props.isOpen}\n          onRequestClose={props.handleClose}\n          style={forMobileStyles}\n        >\n          {props.task ? (\n            <TaskBody\n              task={props.task}\n              handleOnClose={props.handleClose}\n              list={props.list}\n            />\n          ) : (\n            <TaskBody handleOnClose={props.handleClose} list={props.list} />\n          )}\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default FormModal;\n",["148","149"],"/Users/tksk/api-practice/task_app/src/components/pages/board/Board.tsx",["150","151","152","153","154","155"],"/Users/tksk/api-practice/task_app/src/components/hooks/useMediaQuery.ts",[],"/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardModal.tsx",["156","157","158","159","160","161"],"/Users/tksk/api-practice/task_app/src/components/pages/modal/BoardBody.tsx",["162"],{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":3,"column":8,"nodeType":"169","messageId":"170","endLine":3,"endColumn":23},{"ruleId":"167","severity":1,"message":"171","line":2,"column":10,"nodeType":"169","messageId":"170","endLine":2,"endColumn":19},{"ruleId":"167","severity":1,"message":"172","line":1,"column":39,"nodeType":"169","messageId":"170","endLine":1,"endColumn":48},{"ruleId":"167","severity":1,"message":"171","line":4,"column":20,"nodeType":"169","messageId":"170","endLine":4,"endColumn":29},{"ruleId":"167","severity":1,"message":"171","line":4,"column":10,"nodeType":"169","messageId":"170","endLine":4,"endColumn":19},{"ruleId":"167","severity":1,"message":"173","line":8,"column":11,"nodeType":"169","messageId":"170","endLine":8,"endColumn":20},{"ruleId":"167","severity":1,"message":"174","line":12,"column":11,"nodeType":"169","messageId":"170","endLine":12,"endColumn":20},{"ruleId":"167","severity":1,"message":"175","line":17,"column":17,"nodeType":"169","messageId":"170","endLine":17,"endColumn":25},{"ruleId":"163","replacedBy":"176"},{"ruleId":"165","replacedBy":"177"},{"ruleId":"167","severity":1,"message":"178","line":3,"column":3,"nodeType":"169","messageId":"170","endLine":3,"endColumn":11},{"ruleId":"167","severity":1,"message":"179","line":4,"column":3,"nodeType":"169","messageId":"170","endLine":4,"endColumn":8},{"ruleId":"167","severity":1,"message":"180","line":5,"column":3,"nodeType":"169","messageId":"170","endLine":5,"endColumn":9},{"ruleId":"167","severity":1,"message":"181","line":41,"column":9,"nodeType":"169","messageId":"170","endLine":41,"endColumn":16},{"ruleId":"182","severity":1,"message":"183","line":91,"column":6,"nodeType":"184","endLine":91,"endColumn":8,"suggestions":"185"},{"ruleId":"167","severity":1,"message":"186","line":5,"column":10,"nodeType":"169","messageId":"170","endLine":5,"endColumn":23},{"ruleId":"167","severity":1,"message":"187","line":6,"column":10,"nodeType":"169","messageId":"170","endLine":6,"endColumn":18},{"ruleId":"167","severity":1,"message":"188","line":9,"column":10,"nodeType":"169","messageId":"170","endLine":9,"endColumn":20},{"ruleId":"167","severity":1,"message":"171","line":2,"column":10,"nodeType":"169","messageId":"170","endLine":2,"endColumn":19},{"ruleId":"167","severity":1,"message":"189","line":22,"column":11,"nodeType":"169","messageId":"170","endLine":22,"endColumn":15},{"ruleId":"167","severity":1,"message":"171","line":3,"column":10,"nodeType":"169","messageId":"170","endLine":3,"endColumn":19},{"ruleId":"167","severity":1,"message":"189","line":52,"column":11,"nodeType":"169","messageId":"170","endLine":52,"endColumn":15},{"ruleId":"167","severity":1,"message":"171","line":5,"column":10,"nodeType":"169","messageId":"170","endLine":5,"endColumn":19},{"ruleId":"167","severity":1,"message":"189","line":10,"column":11,"nodeType":"169","messageId":"170","endLine":10,"endColumn":15},{"ruleId":"167","severity":1,"message":"190","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":25},{"ruleId":"167","severity":1,"message":"172","line":1,"column":27,"nodeType":"169","messageId":"170","endLine":1,"endColumn":36},{"ruleId":"167","severity":1,"message":"178","line":3,"column":3,"nodeType":"169","messageId":"170","endLine":3,"endColumn":11},{"ruleId":"167","severity":1,"message":"191","line":6,"column":3,"nodeType":"169","messageId":"170","endLine":6,"endColumn":16},{"ruleId":"167","severity":1,"message":"192","line":7,"column":3,"nodeType":"169","messageId":"170","endLine":7,"endColumn":13},{"ruleId":"167","severity":1,"message":"193","line":9,"column":8,"nodeType":"169","messageId":"170","endLine":9,"endColumn":13},{"ruleId":"167","severity":1,"message":"171","line":4,"column":10,"nodeType":"169","messageId":"170","endLine":4,"endColumn":19},{"ruleId":"163","replacedBy":"194"},{"ruleId":"165","replacedBy":"195"},{"ruleId":"167","severity":1,"message":"196","line":1,"column":39,"nodeType":"169","messageId":"170","endLine":1,"endColumn":45},{"ruleId":"167","severity":1,"message":"187","line":2,"column":21,"nodeType":"169","messageId":"170","endLine":2,"endColumn":29},{"ruleId":"167","severity":1,"message":"197","line":4,"column":10,"nodeType":"169","messageId":"170","endLine":4,"endColumn":14},{"ruleId":"167","severity":1,"message":"198","line":6,"column":10,"nodeType":"169","messageId":"170","endLine":6,"endColumn":22},{"ruleId":"167","severity":1,"message":"199","line":7,"column":10,"nodeType":"169","messageId":"170","endLine":7,"endColumn":21},{"ruleId":"167","severity":1,"message":"175","line":16,"column":17,"nodeType":"169","messageId":"170","endLine":16,"endColumn":25},{"ruleId":"167","severity":1,"message":"190","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":25},{"ruleId":"167","severity":1,"message":"200","line":1,"column":27,"nodeType":"169","messageId":"170","endLine":1,"endColumn":37},{"ruleId":"167","severity":1,"message":"171","line":4,"column":10,"nodeType":"169","messageId":"170","endLine":4,"endColumn":19},{"ruleId":"167","severity":1,"message":"201","line":5,"column":8,"nodeType":"169","messageId":"170","endLine":5,"endColumn":14},{"ruleId":"167","severity":1,"message":"202","line":22,"column":7,"nodeType":"169","messageId":"170","endLine":22,"endColumn":22},{"ruleId":"167","severity":1,"message":"203","line":44,"column":9,"nodeType":"169","messageId":"170","endLine":44,"endColumn":11},{"ruleId":"167","severity":1,"message":"189","line":14,"column":11,"nodeType":"169","messageId":"170","endLine":14,"endColumn":15},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"@typescript-eslint/no-unused-vars","'DoneOutlineIcon' is defined but never used.","Identifier","unusedVar","'BoardType' is defined but never used.","'useEffect' is defined but never used.","'ListsType' is defined but never used.","'TasksType' is defined but never used.","'dispatch' is assigned a value but never used.",["204"],["205"],"'Redirect' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkLoginStatus'. Either include it or remove the dependency array.","ArrayExpression",["206"],"'SearchRequest' is defined but never used.","'TaskType' is defined but never used.","'searchText' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'BrowserRouter' is defined but never used.","'useHistory' is defined but never used.","'axios' is defined but never used.",["204"],["205"],"'useRef' is defined but never used.","'Task' is defined but never used.","'BoardRequest' is defined but never used.","'TaskRequest' is defined but never used.","'useContext' is defined but never used.","'styles' is defined but never used.","'forMobileStyles' is assigned a value but never used.","'mq' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"207","fix":"208"},"Update the dependencies array to be: [checkLoginStatus]",{"range":"209","text":"210"},[2702,2704],"[checkLoginStatus]"]